// Generated by OABuilder

package com.viaoa.docbuilder.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;
import com.viaoa.model.oa.VInteger;

import com.viaoa.docbuilder.model.oa.*;
import com.viaoa.docbuilder.model.oa.propertypath.*;
import com.viaoa.docbuilder.model.oa.search.*;
import com.viaoa.docbuilder.model.oa.filter.*;
import com.viaoa.docbuilder.model.search.*;
import com.viaoa.docbuilder.model.filter.*;
import com.viaoa.docbuilder.delegate.ModelDelegate;
import com.viaoa.docbuilder.resource.Resource;

public class SectionModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(SectionModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      rootHub       - for recursive, root
      recursiveHub  - will be shared with root or child hub
      flattenedHub  - will merge all recursive child hubs into one
      treeTableHub  - will have root objects and all expanded child hub objects
    */
    
    // types of ways to view the original hub
    public static final int TYPE_Original = 0;
    public static final int TYPE_TreeTable = 1;
    public static final int TYPE_Root = 2;
    public static final int TYPE_Flattened = 3;
    public static final int TYPE_Recursive = 4;
    
    // Hubs
    protected Hub<Section> hubOriginal;
    // hubs needed since Section is recursive
    protected Hub<Section> hubRecursive; // used by tree, points to root or child hub
    protected Hub<Section> hubTreeTable; // hub of root and the expanded node objects
    protected Hub<Section> hubFlattenedTreeTable; // works with tree
    protected Hub<Section> hubRoot;      // recursive root
    protected Hub<Section> hubFlattened; // recursive flattened
    
    // main hub that points to hubOriginal, hubRoot, hubRecursive, hubFlattened, hubTreeTable
    protected Hub<Section> hub;
    // selected sections
    protected Hub<Section> hubMultiSelect;
    // detail hubs
    protected Hub<Page> hubPage;
    protected Hub<Section> hubParentSection;
    protected Hub<Tutorial> hubTutorial;
    protected Hub<Section> hubSections;
    
    // AddHubs used for references
    protected Hub<Tutorial> hubTutorialSelectFrom;
    
    // ObjectModels
    protected PageModel modelPage;
    protected SectionModel modelParentSection;
    protected TutorialModel modelTutorial;
    protected SectionModel modelSections;
    
    // selectFrom
    protected TutorialModel modelTutorialSelectFrom;
    
    public SectionModel() {
        setDisplayName("Section");
        setPluralDisplayName("Sections");
        setAllowRecursive(true);
    }
    
    public SectionModel(Hub<Section> hubSection) {
        this();
        if (hubSection != null) HubDelegate.setObjectClass(hubSection, Section.class);
        this.hubOriginal = hubSection;
        setType(TYPE_Original);
    }
    public SectionModel(Section section) {
        this();
        getOriginalHub().add(section);
        getOriginalHub().setPos(0);
        setType(TYPE_Original);
    }
    
    public SectionModel(Hub<Section> hubRootSection, Hub<Section> hubSection) {
        this();
        hubOriginal = hubRootSection;
        hubRecursive = hubSection;
        setType(TYPE_Recursive);
    }
    
    // the type of hub that is active
    public void setType(int type) {
        updateType(type);
        getVType().setValue(type);
    }
    public int getType() {
        return getVType().getValue();
    }
    // listen to type change
    public void addTypeListener(HubListener hl) {
        if (hl != null) getTypeHub().addHubListener(hl);
    }
    // used to listen to type change
    private Hub<VInteger> hubType;
    private VInteger type;
    private VInteger getVType() {
        if (type == null) {
            type = new VInteger();
        }
        return type;
    }
    private Hub<VInteger> getTypeHub() {
        if (hubType == null) {
            hubType = new Hub<VInteger>(VInteger.class);
            hubType.add(getVType());
            hubType.setPos(0);
        }
        return hubType;
    }
    private void updateType(int newValue) {
        if (!getAllowRecursive()) newValue = TYPE_Original;
        switch (newValue) {
        case TYPE_Original:
            getHub().setSharedHub(getOriginalHub(), true);
            break;
        case TYPE_TreeTable:
            getHub().setSharedHub(getFlattenedTreeTableHub(), true);
            break;
        case TYPE_Root:
            getHub().setSharedHub(getRootHub(), true);
            break;
        case TYPE_Flattened:
            getHub().setSharedHub(getFlattenedHub(), true);
            break;
        case TYPE_Recursive:
            getHub().setSharedHub(getRecursiveHub(), true);
            break;
        }
    }
    
    public Hub<Section> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<Section>(Section.class);
        }
        return hubOriginal;
    }
    
    // the root hub of a recursive hub
    public Hub<Section> getRootHub() {
        if (hubRoot == null) {
            hubRoot = new Hub<Section>(Section.class);
            new HubRoot(getOriginalHub(), hubRoot);
        }
        return hubRoot;
    }
    
    // This will point/share to the root or child hub that is active.
    public Hub<Section> getRecursiveHub() {
        if (hubRecursive == null) {
            hubRecursive = new Hub<Section>(Section.class);
            hubRecursive.setSharedHub(getOriginalHub());
        }
        return hubRecursive;
    }
    
    // flattened hub for a recursive hub
    public Hub<Section> getFlattenedHub() {
        if (hubFlattened == null) {
            hubFlattened = new Hub<Section>(Section.class);
            HubFlattened hf = new HubFlattened(getOriginalHub(), hubFlattened);
        }
        return hubFlattened;
    }
    
    // hub of expanded nodes in treeTable
    public Hub<Section> getTreeTableHub() {
        if (hubTreeTable == null) {
            hubTreeTable = new Hub<Section>(Section.class);
        }
        return hubTreeTable;
    }
    public Hub<Section> getFlattenedTreeTableHub() {
        if (hubFlattenedTreeTable == null) {
            hubFlattenedTreeTable = new Hub<Section>(Section.class);
            new HubFlattened(getOriginalHub(), hubFlattenedTreeTable);
        }
        return hubFlattenedTreeTable;
    }
    
    public Hub<Page> getPageHub() {
        if (hubPage != null) return hubPage;
        hubPage = getHub().getDetailHub(Section.P_Page);
        return hubPage;
    }
    public Hub<Section> getParentSectionHub() {
        if (hubParentSection != null) return hubParentSection;
        hubParentSection = getHub().getDetailHub(Section.P_ParentSection);
        return hubParentSection;
    }
    public Hub<Tutorial> getTutorialHub() {
        if (hubTutorial != null) return hubTutorial;
        // this is the owner, use detailHub
        hubTutorial = getHub().getDetailHub(Section.P_Tutorial);
        return hubTutorial;
    }
    public Hub<Section> getSections() {
        if (hubSections == null) {
            hubSections = getHub().getDetailHub(Section.P_Sections);
        }
        return hubSections;
    }
    public Hub<Tutorial> getTutorialSelectFromHub() {
        if (hubTutorialSelectFrom != null) return hubTutorialSelectFrom;
        hubTutorialSelectFrom = new Hub<Tutorial>(Tutorial.class);
        Hub<Tutorial> hubTutorialSelectFrom1 = ModelDelegate.getTutorials().createSharedHub();
        HubCombined<Tutorial> hubCombined = new HubCombined(hubTutorialSelectFrom, hubTutorialSelectFrom1, getTutorialHub());
        hubTutorialSelectFrom.setLinkHub(getHub(), Section.P_Tutorial); 
        return hubTutorialSelectFrom;
    }
    public Section getSection() {
        return getHub().getAO();
    }
    
    // points to one: hubOriginal, hubFlattened, hubRecursive, hubTreeTable
    public Hub<Section> getHub() {
        if (hub == null) {
            hub = new Hub<Section>(Section.class);
            hub.setSharedHub(getOriginalHub(), true);
        }
        return hub;
    }
    
    public Hub<Section> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Section>(Section.class);
        }
        return hubMultiSelect;
    }
    
    public PageModel getPageModel() {
        if (modelPage != null) return modelPage;
        modelPage = new PageModel(getPageHub());
        modelPage.setDisplayName("Page");
        modelPage.setPluralDisplayName("Pages");
        modelPage.setForJfc(getForJfc());
        modelPage.setAllowNew(false);
        modelPage.setAllowSave(true);
        modelPage.setAllowAdd(false);
        modelPage.setAllowRemove(false);
        modelPage.setAllowClear(false);
        modelPage.setAllowDelete(false);
        modelPage.setAllowSearch(false);
        modelPage.setAllowHubSearch(false);
        modelPage.setAllowGotoEdit(true);
        modelPage.setViewOnly(getViewOnly());
        // call Section.pageModelCallback(PageModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Section.class, Section.P_Page, modelPage);
    
        return modelPage;
    }
    public SectionModel getParentSectionModel() {
        if (modelParentSection != null) return modelParentSection;
        modelParentSection = new SectionModel(getParentSectionHub());
        modelParentSection.setDisplayName("Parent Section");
        modelParentSection.setPluralDisplayName("Sections");
        modelParentSection.setForJfc(getForJfc());
        modelParentSection.setAllowNew(false);
        modelParentSection.setAllowSave(true);
        modelParentSection.setAllowAdd(false);
        modelParentSection.setAllowRemove(false);
        modelParentSection.setAllowClear(false);
        modelParentSection.setAllowDelete(false);
        modelParentSection.setAllowSearch(false);
        modelParentSection.setAllowHubSearch(false);
        modelParentSection.setAllowGotoEdit(true);
        modelParentSection.setViewOnly(true);
        // call Section.parentSectionModelCallback(SectionModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Section.class, Section.P_ParentSection, modelParentSection);
    
        return modelParentSection;
    }
    public TutorialModel getTutorialModel() {
        if (modelTutorial != null) return modelTutorial;
        modelTutorial = new TutorialModel(getTutorialHub());
        modelTutorial.setDisplayName("Tutorial");
        modelTutorial.setPluralDisplayName("Tutorials");
        modelTutorial.setForJfc(getForJfc());
        modelTutorial.setAllowNew(false);
        modelTutorial.setAllowSave(true);
        modelTutorial.setAllowAdd(false);
        modelTutorial.setAllowRemove(false);
        modelTutorial.setAllowClear(false);
        modelTutorial.setAllowDelete(false);
        modelTutorial.setAllowSearch(false);
        modelTutorial.setAllowHubSearch(false);
        modelTutorial.setAllowGotoEdit(false);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelTutorial.setCreateUI(li == null || !Section.P_Tutorial.equals(li.getName()) );
        modelTutorial.setViewOnly(getViewOnly());
        // call Section.tutorialModelCallback(TutorialModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Section.class, Section.P_Tutorial, modelTutorial);
    
        return modelTutorial;
    }
    public SectionModel getSectionsModel() {
        if (modelSections != null) return modelSections;
        modelSections = new SectionModel(getSections());
        modelSections.setDisplayName("Section");
        modelSections.setPluralDisplayName("Sections");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getSections())) {
            modelSections.setCreateUI(false);
        }
        modelSections.setForJfc(getForJfc());
        modelSections.setAllowNew(true);
        modelSections.setAllowSave(true);
        modelSections.setAllowAdd(false);
        modelSections.setAllowMove(true);
        modelSections.setAllowRemove(false);
        modelSections.setAllowDelete(true);
        modelSections.setAllowSearch(false);
        modelSections.setAllowHubSearch(false);
        modelSections.setAllowGotoEdit(true);
        modelSections.setViewOnly(getViewOnly());
        modelSections.setAllowNew(true);
        modelSections.setAllowTableFilter(false);
        modelSections.setAllowTableSorting(false);
        modelSections.setAllowRecursive(true);
        modelSections.setAllowMultiSelect(false);
        modelSections.setAllowCopy(false);
        modelSections.setAllowCut(false);
        modelSections.setAllowPaste(false);
        // call Section.sectionsModelCallback(SectionModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Section.class, Section.P_Sections, modelSections);
    
        return modelSections;
    }
    
    public TutorialModel getTutorialSelectFromModel() {
        if (modelTutorialSelectFrom != null) return modelTutorialSelectFrom;
        modelTutorialSelectFrom = new TutorialModel(getTutorialSelectFromHub());
        modelTutorialSelectFrom.setDisplayName("Tutorial");
        modelTutorialSelectFrom.setPluralDisplayName("Tutorials");
        modelTutorialSelectFrom.setForJfc(getForJfc());
        modelTutorialSelectFrom.setAllowNew(false);
        modelTutorialSelectFrom.setAllowSave(true);
        modelTutorialSelectFrom.setAllowAdd(false);
        modelTutorialSelectFrom.setAllowMove(false);
        modelTutorialSelectFrom.setAllowRemove(false);
        modelTutorialSelectFrom.setAllowDelete(false);
        modelTutorialSelectFrom.setAllowSearch(false);
        modelTutorialSelectFrom.setAllowHubSearch(true);
        modelTutorialSelectFrom.setAllowGotoEdit(true);
        modelTutorialSelectFrom.setViewOnly(getViewOnly());
        modelTutorialSelectFrom.setAllowNew(false);
        modelTutorialSelectFrom.setAllowTableFilter(true);
        modelTutorialSelectFrom.setAllowTableSorting(true);
        modelTutorialSelectFrom.setAllowCut(false);
        modelTutorialSelectFrom.setAllowCopy(false);
        modelTutorialSelectFrom.setAllowPaste(false);
        modelTutorialSelectFrom.setAllowMultiSelect(false);
        return modelTutorialSelectFrom;
    }
    
    public HubCopy<Section> createHubCopy() {
        Hub<Section> hubSectionx = new Hub<>(Section.class);
        HubCopy<Section> hc = new HubCopy<>(getHub(), hubSectionx, true);
        return hc;
    }
    public SectionModel createCopy() {
        SectionModel mod = new SectionModel(createHubCopy().getHub());
        return mod;
    }
}

