// Generated by OABuilder

package com.viaoa.docbuilder.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.viaoa.docbuilder.model.oa.*;
import com.viaoa.docbuilder.model.oa.propertypath.*;
import com.viaoa.docbuilder.model.oa.search.*;
import com.viaoa.docbuilder.model.oa.filter.*;
import com.viaoa.docbuilder.model.search.*;
import com.viaoa.docbuilder.model.filter.*;
import com.viaoa.docbuilder.delegate.ModelDelegate;
import com.viaoa.docbuilder.resource.Resource;

public class ProjectInfoModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ProjectInfoModel.class.getName());
    
    // Hubs
    protected Hub<ProjectInfo> hub;
    // selected projectInfos
    protected Hub<ProjectInfo> hubMultiSelect;
    // detail hubs
    protected Hub<Page> hubPage;
    protected Hub<PackageInfo> hubPackageInfos;
    
    // ObjectModels
    protected PageModel modelPage;
    protected PackageInfoModel modelPackageInfos;
    
    public ProjectInfoModel() {
        setDisplayName("Project Info");
        setPluralDisplayName("Project Infos");
    }
    
    public ProjectInfoModel(Hub<ProjectInfo> hubProjectInfo) {
        this();
        if (hubProjectInfo != null) HubDelegate.setObjectClass(hubProjectInfo, ProjectInfo.class);
        this.hub = hubProjectInfo;
    }
    public ProjectInfoModel(ProjectInfo projectInfo) {
        this();
        getHub().add(projectInfo);
        getHub().setPos(0);
    }
    
    public Hub<ProjectInfo> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Page> getPageHub() {
        if (hubPage != null) return hubPage;
        hubPage = getHub().getDetailHub(ProjectInfo.P_Page);
        return hubPage;
    }
    public Hub<PackageInfo> getPackageInfos() {
        if (hubPackageInfos == null) {
            hubPackageInfos = getHub().getDetailHub(ProjectInfo.P_PackageInfos);
        }
        return hubPackageInfos;
    }
    public ProjectInfo getProjectInfo() {
        return getHub().getAO();
    }
    
    public Hub<ProjectInfo> getHub() {
        if (hub == null) {
            hub = new Hub<ProjectInfo>(ProjectInfo.class);
        }
        return hub;
    }
    
    public Hub<ProjectInfo> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<ProjectInfo>(ProjectInfo.class);
        }
        return hubMultiSelect;
    }
    
    public PageModel getPageModel() {
        if (modelPage != null) return modelPage;
        modelPage = new PageModel(getPageHub());
        modelPage.setDisplayName("Page");
        modelPage.setPluralDisplayName("Pages");
        modelPage.setForJfc(getForJfc());
        modelPage.setAllowNew(false);
        modelPage.setAllowSave(true);
        modelPage.setAllowAdd(false);
        modelPage.setAllowRemove(false);
        modelPage.setAllowClear(false);
        modelPage.setAllowDelete(false);
        modelPage.setAllowSearch(false);
        modelPage.setAllowHubSearch(false);
        modelPage.setAllowGotoEdit(true);
        modelPage.setViewOnly(getViewOnly());
        // call ProjectInfo.pageModelCallback(PageModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ProjectInfo.class, ProjectInfo.P_Page, modelPage);
    
        return modelPage;
    }
    public PackageInfoModel getPackageInfosModel() {
        if (modelPackageInfos != null) return modelPackageInfos;
        modelPackageInfos = new PackageInfoModel(getPackageInfos());
        modelPackageInfos.setDisplayName("Package Info");
        modelPackageInfos.setPluralDisplayName("Package Infos");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getPackageInfos())) {
            modelPackageInfos.setCreateUI(false);
        }
        modelPackageInfos.setForJfc(getForJfc());
        modelPackageInfos.setAllowNew(true);
        modelPackageInfos.setAllowSave(true);
        modelPackageInfos.setAllowAdd(false);
        modelPackageInfos.setAllowMove(true);
        modelPackageInfos.setAllowRemove(false);
        modelPackageInfos.setAllowDelete(true);
        modelPackageInfos.setAllowSearch(false);
        modelPackageInfos.setAllowHubSearch(false);
        modelPackageInfos.setAllowGotoEdit(true);
        modelPackageInfos.setViewOnly(getViewOnly());
        modelPackageInfos.setAllowNew(true);
        modelPackageInfos.setAllowTableFilter(false);
        modelPackageInfos.setAllowTableSorting(false);
        modelPackageInfos.setAllowRecursive(true);
        modelPackageInfos.setAllowMultiSelect(false);
        modelPackageInfos.setAllowCopy(false);
        modelPackageInfos.setAllowCut(false);
        modelPackageInfos.setAllowPaste(false);
        // call ProjectInfo.packageInfosModelCallback(PackageInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ProjectInfo.class, ProjectInfo.P_PackageInfos, modelPackageInfos);
    
        return modelPackageInfos;
    }
    
    public HubCopy<ProjectInfo> createHubCopy() {
        Hub<ProjectInfo> hubProjectInfox = new Hub<>(ProjectInfo.class);
        HubCopy<ProjectInfo> hc = new HubCopy<>(getHub(), hubProjectInfox, true);
        return hc;
    }
    public ProjectInfoModel createCopy() {
        ProjectInfoModel mod = new ProjectInfoModel(createHubCopy().getHub());
        return mod;
    }
}

