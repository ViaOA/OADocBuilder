// Generated by OABuilder

package com.viaoa.docbuilder.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.viaoa.docbuilder.model.oa.*;
import com.viaoa.docbuilder.model.oa.propertypath.*;
import com.viaoa.docbuilder.model.oa.search.*;
import com.viaoa.docbuilder.model.oa.filter.*;
import com.viaoa.docbuilder.model.search.*;
import com.viaoa.docbuilder.model.filter.*;
import com.viaoa.docbuilder.delegate.ModelDelegate;
import com.viaoa.docbuilder.resource.Resource;

public class ClassInfoModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ClassInfoModel.class.getName());
    
    // Hubs
    protected Hub<ClassInfo> hub;
    // selected classInfos
    protected Hub<ClassInfo> hubMultiSelect;
    // detail hubs
    protected Hub<PackageInfo> hubPackageInfo;
    protected Hub<Page> hubPage;
    protected Hub<Page> hubReferencePages;
    
    // ObjectModels
    protected PackageInfoModel modelPackageInfo;
    protected PageModel modelPage;
    protected PageModel modelReferencePages;
    
    // SearchModels used for references
    protected PageSearchModel modelReferencePagesSearch;
    
    public ClassInfoModel() {
        setDisplayName("Class Info");
        setPluralDisplayName("Class Infos");
    }
    
    public ClassInfoModel(Hub<ClassInfo> hubClassInfo) {
        this();
        if (hubClassInfo != null) HubDelegate.setObjectClass(hubClassInfo, ClassInfo.class);
        this.hub = hubClassInfo;
    }
    public ClassInfoModel(ClassInfo classInfo) {
        this();
        getHub().add(classInfo);
        getHub().setPos(0);
    }
    
    public Hub<ClassInfo> getOriginalHub() {
        return getHub();
    }
    
    public Hub<PackageInfo> getPackageInfoHub() {
        if (hubPackageInfo != null) return hubPackageInfo;
        // this is the owner, use detailHub
        hubPackageInfo = getHub().getDetailHub(ClassInfo.P_PackageInfo);
        return hubPackageInfo;
    }
    public Hub<Page> getPageHub() {
        if (hubPage != null) return hubPage;
        hubPage = getHub().getDetailHub(ClassInfo.P_Page);
        return hubPage;
    }
    public Hub<Page> getReferencePages() {
        if (hubReferencePages == null) {
            hubReferencePages = getHub().getDetailHub(ClassInfo.P_ReferencePages);
        }
        return hubReferencePages;
    }
    public ClassInfo getClassInfo() {
        return getHub().getAO();
    }
    
    public Hub<ClassInfo> getHub() {
        if (hub == null) {
            hub = new Hub<ClassInfo>(ClassInfo.class);
        }
        return hub;
    }
    
    public Hub<ClassInfo> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<ClassInfo>(ClassInfo.class);
        }
        return hubMultiSelect;
    }
    
    public PackageInfoModel getPackageInfoModel() {
        if (modelPackageInfo != null) return modelPackageInfo;
        modelPackageInfo = new PackageInfoModel(getPackageInfoHub());
        modelPackageInfo.setDisplayName("Package Info");
        modelPackageInfo.setPluralDisplayName("Package Infos");
        modelPackageInfo.setForJfc(getForJfc());
        modelPackageInfo.setAllowNew(false);
        modelPackageInfo.setAllowSave(true);
        modelPackageInfo.setAllowAdd(false);
        modelPackageInfo.setAllowRemove(false);
        modelPackageInfo.setAllowClear(false);
        modelPackageInfo.setAllowDelete(false);
        modelPackageInfo.setAllowSearch(false);
        modelPackageInfo.setAllowHubSearch(false);
        modelPackageInfo.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelPackageInfo.setCreateUI(li == null || !ClassInfo.P_PackageInfo.equals(li.getName()) );
        modelPackageInfo.setViewOnly(getViewOnly());
        // call ClassInfo.packageInfoModelCallback(PackageInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ClassInfo.class, ClassInfo.P_PackageInfo, modelPackageInfo);
    
        return modelPackageInfo;
    }
    public PageModel getPageModel() {
        if (modelPage != null) return modelPage;
        modelPage = new PageModel(getPageHub());
        modelPage.setDisplayName("Page");
        modelPage.setPluralDisplayName("Pages");
        modelPage.setForJfc(getForJfc());
        modelPage.setAllowNew(false);
        modelPage.setAllowSave(true);
        modelPage.setAllowAdd(false);
        modelPage.setAllowRemove(false);
        modelPage.setAllowClear(false);
        modelPage.setAllowDelete(false);
        modelPage.setAllowSearch(false);
        modelPage.setAllowHubSearch(false);
        modelPage.setAllowGotoEdit(true);
        modelPage.setViewOnly(getViewOnly());
        // call ClassInfo.pageModelCallback(PageModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ClassInfo.class, ClassInfo.P_Page, modelPage);
    
        return modelPage;
    }
    public PageModel getReferencePagesModel() {
        if (modelReferencePages != null) return modelReferencePages;
        modelReferencePages = new PageModel(getReferencePages());
        modelReferencePages.setDisplayName("Page");
        modelReferencePages.setPluralDisplayName("Pages");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getReferencePages())) {
            modelReferencePages.setCreateUI(false);
        }
        modelReferencePages.setForJfc(getForJfc());
        modelReferencePages.setAllowNew(false);
        modelReferencePages.setAllowSave(true);
        modelReferencePages.setAllowAdd(true);
        modelReferencePages.setAllowMove(false);
        modelReferencePages.setAllowRemove(true);
        modelReferencePages.setAllowDelete(false);
        modelReferencePages.setAllowSearch(false);
        modelReferencePages.setAllowHubSearch(false);
        modelReferencePages.setAllowGotoEdit(true);
        modelReferencePages.setViewOnly(getViewOnly());
        modelReferencePages.setAllowNew(false);
        modelReferencePages.setAllowTableFilter(true);
        modelReferencePages.setAllowTableSorting(true);
        modelReferencePages.setAllowMultiSelect(false);
        modelReferencePages.setAllowCopy(false);
        modelReferencePages.setAllowCut(false);
        modelReferencePages.setAllowPaste(false);
        // call ClassInfo.referencePagesModelCallback(PageModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ClassInfo.class, ClassInfo.P_ReferencePages, modelReferencePages);
    
        return modelReferencePages;
    }
    
    public PageSearchModel getReferencePagesSearchModel() {
        if (modelReferencePagesSearch != null) return modelReferencePagesSearch;
        modelReferencePagesSearch = new PageSearchModel();
        return modelReferencePagesSearch;
    }
    
    public HubCopy<ClassInfo> createHubCopy() {
        Hub<ClassInfo> hubClassInfox = new Hub<>(ClassInfo.class);
        HubCopy<ClassInfo> hc = new HubCopy<>(getHub(), hubClassInfox, true);
        return hc;
    }
    public ClassInfoModel createCopy() {
        ClassInfoModel mod = new ClassInfoModel(createHubCopy().getHub());
        return mod;
    }
}

