// Generated by OABuilder

package com.viaoa.docbuilder.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.viaoa.docbuilder.model.oa.*;
import com.viaoa.docbuilder.model.oa.propertypath.*;
import com.viaoa.docbuilder.model.oa.search.*;
import com.viaoa.docbuilder.model.oa.filter.*;
import com.viaoa.docbuilder.model.search.*;
import com.viaoa.docbuilder.model.filter.*;
import com.viaoa.docbuilder.delegate.ModelDelegate;
import com.viaoa.docbuilder.resource.Resource;

public class PageModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(PageModel.class.getName());
    
    // Hubs
    protected Hub<Page> hub;
    // selected pages
    protected Hub<Page> hubMultiSelect;
    // detail hubs
    protected Hub<ClassInfo> hubClassInfo;
    protected Hub<Section> hubSection;
    protected Hub<Code> hubCodes;
    protected Hub<ImageStore> hubImageStores;
    protected Hub<ClassInfo> hubReferenceClassInfos;
    
    // ObjectModels
    protected ClassInfoModel modelClassInfo;
    protected SectionModel modelSection;
    protected CodeModel modelCodes;
    protected ImageStoreModel modelImageStores;
    protected ClassInfoModel modelReferenceClassInfos;
    
    // SearchModels used for references
    protected ImageStoreSearchModel modelImageStoresSearch;
    protected ClassInfoSearchModel modelReferenceClassInfosSearch;
    
    public PageModel() {
        setDisplayName("Page");
        setPluralDisplayName("Pages");
    }
    
    public PageModel(Hub<Page> hubPage) {
        this();
        if (hubPage != null) HubDelegate.setObjectClass(hubPage, Page.class);
        this.hub = hubPage;
    }
    public PageModel(Page page) {
        this();
        getHub().add(page);
        getHub().setPos(0);
    }
    
    public Hub<Page> getOriginalHub() {
        return getHub();
    }
    
    public Hub<ClassInfo> getClassInfoHub() {
        if (hubClassInfo != null) return hubClassInfo;
        hubClassInfo = getHub().getDetailHub(Page.P_ClassInfo);
        return hubClassInfo;
    }
    public Hub<Section> getSectionHub() {
        if (hubSection != null) return hubSection;
        hubSection = getHub().getDetailHub(Page.P_Section);
        return hubSection;
    }
    public Hub<Code> getCodes() {
        if (hubCodes == null) {
            hubCodes = getHub().getDetailHub(Page.P_Codes);
        }
        return hubCodes;
    }
    public Hub<ImageStore> getImageStores() {
        if (hubImageStores == null) {
            hubImageStores = getHub().getDetailHub(Page.P_ImageStores);
        }
        return hubImageStores;
    }
    public Hub<ClassInfo> getReferenceClassInfos() {
        if (hubReferenceClassInfos == null) {
            hubReferenceClassInfos = getHub().getDetailHub(Page.P_ReferenceClassInfos);
        }
        return hubReferenceClassInfos;
    }
    public Page getPage() {
        return getHub().getAO();
    }
    
    public Hub<Page> getHub() {
        if (hub == null) {
            hub = new Hub<Page>(Page.class);
        }
        return hub;
    }
    
    public Hub<Page> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Page>(Page.class);
        }
        return hubMultiSelect;
    }
    
    public ClassInfoModel getClassInfoModel() {
        if (modelClassInfo != null) return modelClassInfo;
        modelClassInfo = new ClassInfoModel(getClassInfoHub());
        modelClassInfo.setDisplayName("Class Info");
        modelClassInfo.setPluralDisplayName("Class Infos");
        modelClassInfo.setForJfc(getForJfc());
        modelClassInfo.setAllowNew(false);
        modelClassInfo.setAllowSave(true);
        modelClassInfo.setAllowAdd(false);
        modelClassInfo.setAllowRemove(false);
        modelClassInfo.setAllowClear(false);
        modelClassInfo.setAllowDelete(false);
        modelClassInfo.setAllowSearch(false);
        modelClassInfo.setAllowHubSearch(false);
        modelClassInfo.setAllowGotoEdit(true);
        modelClassInfo.setViewOnly(true);
        // call Page.classInfoModelCallback(ClassInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Page.class, Page.P_ClassInfo, modelClassInfo);
    
        return modelClassInfo;
    }
    public SectionModel getSectionModel() {
        if (modelSection != null) return modelSection;
        modelSection = new SectionModel(getSectionHub());
        modelSection.setDisplayName("Section");
        modelSection.setPluralDisplayName("Sections");
        modelSection.setForJfc(getForJfc());
        modelSection.setAllowNew(false);
        modelSection.setAllowSave(true);
        modelSection.setAllowAdd(false);
        modelSection.setAllowRemove(false);
        modelSection.setAllowClear(false);
        modelSection.setAllowDelete(false);
        modelSection.setAllowSearch(false);
        modelSection.setAllowHubSearch(false);
        modelSection.setAllowGotoEdit(true);
        modelSection.setViewOnly(true);
        // call Page.sectionModelCallback(SectionModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Page.class, Page.P_Section, modelSection);
    
        return modelSection;
    }
    public CodeModel getCodesModel() {
        if (modelCodes != null) return modelCodes;
        modelCodes = new CodeModel(getCodes());
        modelCodes.setDisplayName("Code");
        modelCodes.setPluralDisplayName("Codes");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getCodes())) {
            modelCodes.setCreateUI(false);
        }
        modelCodes.setForJfc(getForJfc());
        modelCodes.setAllowNew(false);
        modelCodes.setAllowSave(true);
        modelCodes.setAllowAdd(false);
        modelCodes.setAllowMove(false);
        modelCodes.setAllowRemove(false);
        modelCodes.setAllowDelete(true);
        modelCodes.setAllowSearch(false);
        modelCodes.setAllowHubSearch(false);
        modelCodes.setAllowGotoEdit(true);
        modelCodes.setViewOnly(getViewOnly());
        modelCodes.setAllowNew(false);
        modelCodes.setAllowTableFilter(true);
        modelCodes.setAllowTableSorting(true);
        modelCodes.setAllowMultiSelect(false);
        modelCodes.setAllowCopy(false);
        modelCodes.setAllowCut(false);
        modelCodes.setAllowPaste(false);
        // call Page.codesModelCallback(CodeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Page.class, Page.P_Codes, modelCodes);
    
        return modelCodes;
    }
    public ImageStoreModel getImageStoresModel() {
        if (modelImageStores != null) return modelImageStores;
        modelImageStores = new ImageStoreModel(getImageStores());
        modelImageStores.setDisplayName("Image Store");
        modelImageStores.setPluralDisplayName("Image Stores");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getImageStores())) {
            modelImageStores.setCreateUI(false);
        }
        modelImageStores.setForJfc(getForJfc());
        modelImageStores.setAllowNew(true);
        modelImageStores.setAllowSave(true);
        modelImageStores.setAllowAdd(true);
        modelImageStores.setAllowMove(false);
        modelImageStores.setAllowRemove(true);
        modelImageStores.setAllowDelete(false);
        modelImageStores.setAllowSearch(false);
        modelImageStores.setAllowHubSearch(false);
        modelImageStores.setAllowGotoEdit(true);
        modelImageStores.setViewOnly(getViewOnly());
        modelImageStores.setAllowNew(true);
        modelImageStores.setAllowTableFilter(true);
        modelImageStores.setAllowTableSorting(true);
        modelImageStores.setAllowMultiSelect(false);
        modelImageStores.setAllowCopy(false);
        modelImageStores.setAllowCut(false);
        modelImageStores.setAllowPaste(false);
        // call Page.imageStoresModelCallback(ImageStoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Page.class, Page.P_ImageStores, modelImageStores);
    
        return modelImageStores;
    }
    public ClassInfoModel getReferenceClassInfosModel() {
        if (modelReferenceClassInfos != null) return modelReferenceClassInfos;
        modelReferenceClassInfos = new ClassInfoModel(getReferenceClassInfos());
        modelReferenceClassInfos.setDisplayName("Class Info");
        modelReferenceClassInfos.setPluralDisplayName("Class Infos");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getReferenceClassInfos())) {
            modelReferenceClassInfos.setCreateUI(false);
        }
        modelReferenceClassInfos.setForJfc(getForJfc());
        modelReferenceClassInfos.setAllowNew(false);
        modelReferenceClassInfos.setAllowSave(true);
        modelReferenceClassInfos.setAllowAdd(true);
        modelReferenceClassInfos.setAllowMove(false);
        modelReferenceClassInfos.setAllowRemove(true);
        modelReferenceClassInfos.setAllowDelete(false);
        modelReferenceClassInfos.setAllowSearch(false);
        modelReferenceClassInfos.setAllowHubSearch(false);
        modelReferenceClassInfos.setAllowGotoEdit(true);
        modelReferenceClassInfos.setViewOnly(getViewOnly());
        modelReferenceClassInfos.setAllowNew(false);
        modelReferenceClassInfos.setAllowTableFilter(true);
        modelReferenceClassInfos.setAllowTableSorting(true);
        modelReferenceClassInfos.setAllowMultiSelect(false);
        modelReferenceClassInfos.setAllowCopy(false);
        modelReferenceClassInfos.setAllowCut(false);
        modelReferenceClassInfos.setAllowPaste(false);
        // call Page.referenceClassInfosModelCallback(ClassInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Page.class, Page.P_ReferenceClassInfos, modelReferenceClassInfos);
    
        return modelReferenceClassInfos;
    }
    
    public ImageStoreSearchModel getImageStoresSearchModel() {
        if (modelImageStoresSearch != null) return modelImageStoresSearch;
        modelImageStoresSearch = new ImageStoreSearchModel();
        return modelImageStoresSearch;
    }
    public ClassInfoSearchModel getReferenceClassInfosSearchModel() {
        if (modelReferenceClassInfosSearch != null) return modelReferenceClassInfosSearch;
        modelReferenceClassInfosSearch = new ClassInfoSearchModel();
        return modelReferenceClassInfosSearch;
    }
    
    public HubCopy<Page> createHubCopy() {
        Hub<Page> hubPagex = new Hub<>(Page.class);
        HubCopy<Page> hc = new HubCopy<>(getHub(), hubPagex, true);
        return hc;
    }
    public PageModel createCopy() {
        PageModel mod = new PageModel(createHubCopy().getHub());
        return mod;
    }
}

