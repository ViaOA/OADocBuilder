// Generated by OABuilder

package com.viaoa.docbuilder.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;
import com.viaoa.model.oa.VInteger;

import com.viaoa.docbuilder.model.oa.*;
import com.viaoa.docbuilder.model.oa.propertypath.*;
import com.viaoa.docbuilder.model.oa.search.*;
import com.viaoa.docbuilder.model.oa.filter.*;
import com.viaoa.docbuilder.model.search.*;
import com.viaoa.docbuilder.model.filter.*;
import com.viaoa.docbuilder.delegate.ModelDelegate;
import com.viaoa.docbuilder.resource.Resource;

public class PackageInfoModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(PackageInfoModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      rootHub       - for recursive, root
      recursiveHub  - will be shared with root or child hub
      flattenedHub  - will merge all recursive child hubs into one
      treeTableHub  - will have root objects and all expanded child hub objects
    */
    
    // types of ways to view the original hub
    public static final int TYPE_Original = 0;
    public static final int TYPE_TreeTable = 1;
    public static final int TYPE_Root = 2;
    public static final int TYPE_Flattened = 3;
    public static final int TYPE_Recursive = 4;
    
    // Hubs
    protected Hub<PackageInfo> hubOriginal;
    // hubs needed since PackageInfo is recursive
    protected Hub<PackageInfo> hubRecursive; // used by tree, points to root or child hub
    protected Hub<PackageInfo> hubTreeTable; // hub of root and the expanded node objects
    protected Hub<PackageInfo> hubFlattenedTreeTable; // works with tree
    protected Hub<PackageInfo> hubRoot;      // recursive root
    protected Hub<PackageInfo> hubFlattened; // recursive flattened
    
    // main hub that points to hubOriginal, hubRoot, hubRecursive, hubFlattened, hubTreeTable
    protected Hub<PackageInfo> hub;
    // selected packageInfos
    protected Hub<PackageInfo> hubMultiSelect;
    // detail hubs
    protected Hub<Page> hubPage;
    protected Hub<PackageInfo> hubParentPackageInfo;
    protected Hub<ProjectInfo> hubProjectInfo;
    protected Hub<ClassInfo> hubClassInfos;
    protected Hub<PackageInfo> hubPackageInfos;
    
    // AddHubs used for references
    protected Hub<ProjectInfo> hubProjectInfoSelectFrom;
    
    // ObjectModels
    protected PageModel modelPage;
    protected PackageInfoModel modelParentPackageInfo;
    protected ProjectInfoModel modelProjectInfo;
    protected ClassInfoModel modelClassInfos;
    protected PackageInfoModel modelPackageInfos;
    
    // selectFrom
    protected ProjectInfoModel modelProjectInfoSelectFrom;
    
    // SearchModels used for references
    protected PackageInfoSearchModel modelParentPackageInfoSearch;
    protected ProjectInfoSearchModel modelProjectInfoSearch;
    protected PackageInfoSearchModel modelPackageInfosSearch;
    
    public PackageInfoModel() {
        setDisplayName("Package Info");
        setPluralDisplayName("Package Infos");
        setAllowRecursive(true);
    }
    
    public PackageInfoModel(Hub<PackageInfo> hubPackageInfo) {
        this();
        if (hubPackageInfo != null) HubDelegate.setObjectClass(hubPackageInfo, PackageInfo.class);
        this.hubOriginal = hubPackageInfo;
        setType(TYPE_Original);
    }
    public PackageInfoModel(PackageInfo packageInfo) {
        this();
        getOriginalHub().add(packageInfo);
        getOriginalHub().setPos(0);
        setType(TYPE_Original);
    }
    
    public PackageInfoModel(Hub<PackageInfo> hubRootPackageInfo, Hub<PackageInfo> hubPackageInfo) {
        this();
        hubOriginal = hubRootPackageInfo;
        hubRecursive = hubPackageInfo;
        setType(TYPE_Recursive);
    }
    
    // the type of hub that is active
    public void setType(int type) {
        updateType(type);
        getVType().setValue(type);
    }
    public int getType() {
        return getVType().getValue();
    }
    // listen to type change
    public void addTypeListener(HubListener hl) {
        if (hl != null) getTypeHub().addHubListener(hl);
    }
    // used to listen to type change
    private Hub<VInteger> hubType;
    private VInteger type;
    private VInteger getVType() {
        if (type == null) {
            type = new VInteger();
        }
        return type;
    }
    private Hub<VInteger> getTypeHub() {
        if (hubType == null) {
            hubType = new Hub<VInteger>(VInteger.class);
            hubType.add(getVType());
            hubType.setPos(0);
        }
        return hubType;
    }
    private void updateType(int newValue) {
        if (!getAllowRecursive()) newValue = TYPE_Original;
        switch (newValue) {
        case TYPE_Original:
            getHub().setSharedHub(getOriginalHub(), true);
            break;
        case TYPE_TreeTable:
            getHub().setSharedHub(getFlattenedTreeTableHub(), true);
            break;
        case TYPE_Root:
            getHub().setSharedHub(getRootHub(), true);
            break;
        case TYPE_Flattened:
            getHub().setSharedHub(getFlattenedHub(), true);
            break;
        case TYPE_Recursive:
            getHub().setSharedHub(getRecursiveHub(), true);
            break;
        }
    }
    
    public Hub<PackageInfo> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<PackageInfo>(PackageInfo.class);
        }
        return hubOriginal;
    }
    
    // the root hub of a recursive hub
    public Hub<PackageInfo> getRootHub() {
        if (hubRoot == null) {
            hubRoot = new Hub<PackageInfo>(PackageInfo.class);
            new HubRoot(getOriginalHub(), hubRoot);
        }
        return hubRoot;
    }
    
    // This will point/share to the root or child hub that is active.
    public Hub<PackageInfo> getRecursiveHub() {
        if (hubRecursive == null) {
            hubRecursive = new Hub<PackageInfo>(PackageInfo.class);
            hubRecursive.setSharedHub(getOriginalHub());
        }
        return hubRecursive;
    }
    
    // flattened hub for a recursive hub
    public Hub<PackageInfo> getFlattenedHub() {
        if (hubFlattened == null) {
            hubFlattened = new Hub<PackageInfo>(PackageInfo.class);
            HubFlattened hf = new HubFlattened(getOriginalHub(), hubFlattened);
        }
        return hubFlattened;
    }
    
    // hub of expanded nodes in treeTable
    public Hub<PackageInfo> getTreeTableHub() {
        if (hubTreeTable == null) {
            hubTreeTable = new Hub<PackageInfo>(PackageInfo.class);
        }
        return hubTreeTable;
    }
    public Hub<PackageInfo> getFlattenedTreeTableHub() {
        if (hubFlattenedTreeTable == null) {
            hubFlattenedTreeTable = new Hub<PackageInfo>(PackageInfo.class);
            new HubFlattened(getOriginalHub(), hubFlattenedTreeTable);
        }
        return hubFlattenedTreeTable;
    }
    
    public Hub<Page> getPageHub() {
        if (hubPage != null) return hubPage;
        hubPage = getHub().getDetailHub(PackageInfo.P_Page);
        return hubPage;
    }
    public Hub<PackageInfo> getParentPackageInfoHub() {
        if (hubParentPackageInfo != null) return hubParentPackageInfo;
        hubParentPackageInfo = getHub().getDetailHub(PackageInfo.P_ParentPackageInfo);
        return hubParentPackageInfo;
    }
    public Hub<ProjectInfo> getProjectInfoHub() {
        if (hubProjectInfo != null) return hubProjectInfo;
        // this is the owner, use detailHub
        hubProjectInfo = getHub().getDetailHub(PackageInfo.P_ProjectInfo);
        return hubProjectInfo;
    }
    public Hub<ClassInfo> getClassInfos() {
        if (hubClassInfos == null) {
            hubClassInfos = getHub().getDetailHub(PackageInfo.P_ClassInfos);
        }
        return hubClassInfos;
    }
    public Hub<PackageInfo> getPackageInfos() {
        if (hubPackageInfos == null) {
            hubPackageInfos = getHub().getDetailHub(PackageInfo.P_PackageInfos);
        }
        return hubPackageInfos;
    }
    public Hub<ProjectInfo> getProjectInfoSelectFromHub() {
        if (hubProjectInfoSelectFrom != null) return hubProjectInfoSelectFrom;
        hubProjectInfoSelectFrom = new Hub<ProjectInfo>(ProjectInfo.class);
        Hub<ProjectInfo> hubProjectInfoSelectFrom1 = ModelDelegate.getProjectInfos().createSharedHub();
        HubCombined<ProjectInfo> hubCombined = new HubCombined(hubProjectInfoSelectFrom, hubProjectInfoSelectFrom1, getProjectInfoHub());
        hubProjectInfoSelectFrom.setLinkHub(getHub(), PackageInfo.P_ProjectInfo); 
        return hubProjectInfoSelectFrom;
    }
    public PackageInfo getPackageInfo() {
        return getHub().getAO();
    }
    
    // points to one: hubOriginal, hubFlattened, hubRecursive, hubTreeTable
    public Hub<PackageInfo> getHub() {
        if (hub == null) {
            hub = new Hub<PackageInfo>(PackageInfo.class);
            hub.setSharedHub(getOriginalHub(), true);
        }
        return hub;
    }
    
    public Hub<PackageInfo> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<PackageInfo>(PackageInfo.class);
        }
        return hubMultiSelect;
    }
    
    public PageModel getPageModel() {
        if (modelPage != null) return modelPage;
        modelPage = new PageModel(getPageHub());
        modelPage.setDisplayName("Page");
        modelPage.setPluralDisplayName("Pages");
        modelPage.setForJfc(getForJfc());
        modelPage.setAllowNew(false);
        modelPage.setAllowSave(true);
        modelPage.setAllowAdd(false);
        modelPage.setAllowRemove(false);
        modelPage.setAllowClear(false);
        modelPage.setAllowDelete(false);
        modelPage.setAllowSearch(false);
        modelPage.setAllowHubSearch(false);
        modelPage.setAllowGotoEdit(true);
        modelPage.setViewOnly(getViewOnly());
        // call PackageInfo.pageModelCallback(PageModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(PackageInfo.class, PackageInfo.P_Page, modelPage);
    
        return modelPage;
    }
    public PackageInfoModel getParentPackageInfoModel() {
        if (modelParentPackageInfo != null) return modelParentPackageInfo;
        modelParentPackageInfo = new PackageInfoModel(getParentPackageInfoHub());
        modelParentPackageInfo.setDisplayName("Parent Package Info");
        modelParentPackageInfo.setPluralDisplayName("Package Infos");
        modelParentPackageInfo.setForJfc(getForJfc());
        modelParentPackageInfo.setAllowNew(false);
        modelParentPackageInfo.setAllowSave(true);
        modelParentPackageInfo.setAllowAdd(false);
        modelParentPackageInfo.setAllowRemove(true);
        modelParentPackageInfo.setAllowClear(true);
        modelParentPackageInfo.setAllowDelete(false);
        modelParentPackageInfo.setAllowSearch(true);
        modelParentPackageInfo.setAllowHubSearch(false);
        modelParentPackageInfo.setAllowGotoEdit(true);
        modelParentPackageInfo.setViewOnly(true);
        // call PackageInfo.parentPackageInfoModelCallback(PackageInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(PackageInfo.class, PackageInfo.P_ParentPackageInfo, modelParentPackageInfo);
    
        return modelParentPackageInfo;
    }
    public ProjectInfoModel getProjectInfoModel() {
        if (modelProjectInfo != null) return modelProjectInfo;
        modelProjectInfo = new ProjectInfoModel(getProjectInfoHub());
        modelProjectInfo.setDisplayName("Project Info");
        modelProjectInfo.setPluralDisplayName("Project Infos");
        modelProjectInfo.setForJfc(getForJfc());
        modelProjectInfo.setAllowNew(false);
        modelProjectInfo.setAllowSave(true);
        modelProjectInfo.setAllowAdd(false);
        modelProjectInfo.setAllowRemove(false);
        modelProjectInfo.setAllowClear(false);
        modelProjectInfo.setAllowDelete(false);
        modelProjectInfo.setAllowSearch(true);
        modelProjectInfo.setAllowHubSearch(true);
        modelProjectInfo.setAllowGotoEdit(false);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelProjectInfo.setCreateUI(li == null || !PackageInfo.P_ProjectInfo.equals(li.getName()) );
        modelProjectInfo.setViewOnly(getViewOnly());
        // call PackageInfo.projectInfoModelCallback(ProjectInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(PackageInfo.class, PackageInfo.P_ProjectInfo, modelProjectInfo);
    
        return modelProjectInfo;
    }
    public ClassInfoModel getClassInfosModel() {
        if (modelClassInfos != null) return modelClassInfos;
        modelClassInfos = new ClassInfoModel(getClassInfos());
        modelClassInfos.setDisplayName("Class Info");
        modelClassInfos.setPluralDisplayName("Class Infos");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getClassInfos())) {
            modelClassInfos.setCreateUI(false);
        }
        modelClassInfos.setForJfc(getForJfc());
        modelClassInfos.setAllowNew(true);
        modelClassInfos.setAllowSave(true);
        modelClassInfos.setAllowAdd(false);
        modelClassInfos.setAllowMove(false);
        modelClassInfos.setAllowRemove(false);
        modelClassInfos.setAllowDelete(true);
        modelClassInfos.setAllowSearch(false);
        modelClassInfos.setAllowHubSearch(false);
        modelClassInfos.setAllowGotoEdit(true);
        modelClassInfos.setViewOnly(getViewOnly());
        modelClassInfos.setAllowNew(true);
        modelClassInfos.setAllowTableFilter(true);
        modelClassInfos.setAllowTableSorting(true);
        modelClassInfos.setAllowMultiSelect(false);
        modelClassInfos.setAllowCopy(false);
        modelClassInfos.setAllowCut(false);
        modelClassInfos.setAllowPaste(false);
        // call PackageInfo.classInfosModelCallback(ClassInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(PackageInfo.class, PackageInfo.P_ClassInfos, modelClassInfos);
    
        return modelClassInfos;
    }
    public PackageInfoModel getPackageInfosModel() {
        if (modelPackageInfos != null) return modelPackageInfos;
        modelPackageInfos = new PackageInfoModel(getPackageInfos());
        modelPackageInfos.setDisplayName("Package Info");
        modelPackageInfos.setPluralDisplayName("Package Infos");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getPackageInfos())) {
            modelPackageInfos.setCreateUI(false);
        }
        modelPackageInfos.setForJfc(getForJfc());
        modelPackageInfos.setAllowNew(false);
        modelPackageInfos.setAllowSave(true);
        modelPackageInfos.setAllowAdd(true);
        modelPackageInfos.setAllowMove(true);
        modelPackageInfos.setAllowRemove(true);
        modelPackageInfos.setAllowDelete(false);
        modelPackageInfos.setAllowSearch(false);
        modelPackageInfos.setAllowHubSearch(false);
        modelPackageInfos.setAllowGotoEdit(true);
        modelPackageInfos.setViewOnly(getViewOnly());
        modelPackageInfos.setAllowNew(false);
        modelPackageInfos.setAllowTableFilter(false);
        modelPackageInfos.setAllowTableSorting(false);
        modelPackageInfos.setAllowRecursive(true);
        modelPackageInfos.setAllowMultiSelect(false);
        modelPackageInfos.setAllowCopy(false);
        modelPackageInfos.setAllowCut(false);
        modelPackageInfos.setAllowPaste(false);
        // call PackageInfo.packageInfosModelCallback(PackageInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(PackageInfo.class, PackageInfo.P_PackageInfos, modelPackageInfos);
    
        return modelPackageInfos;
    }
    
    public ProjectInfoModel getProjectInfoSelectFromModel() {
        if (modelProjectInfoSelectFrom != null) return modelProjectInfoSelectFrom;
        modelProjectInfoSelectFrom = new ProjectInfoModel(getProjectInfoSelectFromHub());
        modelProjectInfoSelectFrom.setDisplayName("Project Info");
        modelProjectInfoSelectFrom.setPluralDisplayName("Project Infos");
        modelProjectInfoSelectFrom.setForJfc(getForJfc());
        modelProjectInfoSelectFrom.setAllowNew(false);
        modelProjectInfoSelectFrom.setAllowSave(true);
        modelProjectInfoSelectFrom.setAllowAdd(false);
        modelProjectInfoSelectFrom.setAllowMove(false);
        modelProjectInfoSelectFrom.setAllowRemove(false);
        modelProjectInfoSelectFrom.setAllowDelete(false);
        modelProjectInfoSelectFrom.setAllowSearch(true);
        modelProjectInfoSelectFrom.setAllowHubSearch(true);
        modelProjectInfoSelectFrom.setAllowGotoEdit(true);
        modelProjectInfoSelectFrom.setViewOnly(getViewOnly());
        modelProjectInfoSelectFrom.setAllowNew(false);
        modelProjectInfoSelectFrom.setAllowTableFilter(true);
        modelProjectInfoSelectFrom.setAllowTableSorting(true);
        modelProjectInfoSelectFrom.setAllowCut(false);
        modelProjectInfoSelectFrom.setAllowCopy(false);
        modelProjectInfoSelectFrom.setAllowPaste(false);
        modelProjectInfoSelectFrom.setAllowMultiSelect(false);
        return modelProjectInfoSelectFrom;
    }
    public PackageInfoSearchModel getParentPackageInfoSearchModel() {
        if (modelParentPackageInfoSearch != null) return modelParentPackageInfoSearch;
        modelParentPackageInfoSearch = new PackageInfoSearchModel();
        HubSelectDelegate.adoptWhereHub(modelParentPackageInfoSearch.getHub(), PackageInfo.P_ParentPackageInfo, getHub());
        return modelParentPackageInfoSearch;
    }
    public ProjectInfoSearchModel getProjectInfoSearchModel() {
        if (modelProjectInfoSearch != null) return modelProjectInfoSearch;
        modelProjectInfoSearch = new ProjectInfoSearchModel();
        HubSelectDelegate.adoptWhereHub(modelProjectInfoSearch.getHub(), PackageInfo.P_ProjectInfo, getHub());
        return modelProjectInfoSearch;
    }
    public PackageInfoSearchModel getPackageInfosSearchModel() {
        if (modelPackageInfosSearch != null) return modelPackageInfosSearch;
        modelPackageInfosSearch = new PackageInfoSearchModel();
        return modelPackageInfosSearch;
    }
    
    public HubCopy<PackageInfo> createHubCopy() {
        Hub<PackageInfo> hubPackageInfox = new Hub<>(PackageInfo.class);
        HubCopy<PackageInfo> hc = new HubCopy<>(getHub(), hubPackageInfox, true);
        return hc;
    }
    public PackageInfoModel createCopy() {
        PackageInfoModel mod = new PackageInfoModel(createHubCopy().getHub());
        return mod;
    }
}

