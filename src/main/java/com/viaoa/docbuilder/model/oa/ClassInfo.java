// Generated by OABuilder
package com.viaoa.docbuilder.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import javax.xml.bind.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.viaoa.docbuilder.delegate.oa.*;
import com.viaoa.docbuilder.model.oa.filter.*;
import com.viaoa.docbuilder.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "classInfo",
    pluralName = "ClassInfos",
    shortName = "cli",
    displayName = "Class Info",
    displayProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "ClassInfoPackageInfo", fkey = true, columns = { @OAIndexColumn(name = "PackageInfoId") })
    }
)
@XmlRootElement(name = "classInfo")
@XmlType(factoryMethod = "jaxbCreate")
@XmlAccessorType(XmlAccessType.NONE)
public class ClassInfo extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ClassInfo.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Core = "Core";
    public static final String P_Core = "Core";
    public static final String PROPERTY_Doc = "Doc";
    public static final String P_Doc = "Doc";
     
     
    public static final String PROPERTY_PackageInfo = "PackageInfo";
    public static final String P_PackageInfo = "PackageInfo";
    public static final String PROPERTY_Page = "Page";
    public static final String P_Page = "Page";
    public static final String PROPERTY_ReferencePages = "ReferencePages";
    public static final String P_ReferencePages = "ReferencePages";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
    protected volatile boolean core;
    protected volatile String doc;
     
    // Links to other objects.
    protected volatile transient PackageInfo packageInfo;
    protected volatile transient Page page;
    protected transient Hub<Page> hubReferencePages;
     
    public ClassInfo() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
        getPage(); // have it autoCreated
    }
     
    public ClassInfo(int id) {
        this();
        setId(id);
    }
     

    @XmlAttribute(name="oaSingleId")
    public Integer getJaxbGuid() {
        return super.getJaxbGuid();
    }

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @XmlTransient
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @XmlID
    @XmlAttribute(name="id")
    public String getJaxbId() {
        // note: jaxb spec requires id to be a string
        if (!getJaxbShouldInclude(P_Id)) return null;
        return ""+id;
    }
    public void setJaxbId(String id) {
        if (getJaxbAllowPropertyChange(P_Id, this.id, id)) {
            setId((int) OAConv.convert(int.class, id));
        }
    }

    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @XmlElement(name="created", nillable=true)
    public OADateTime getJaxbCreated() {
        if (!getJaxbShouldInclude(P_Created)) return null;
        return getCreated();
    }
    public void setJaxbCreated(OADateTime newValue) {
        if (getJaxbAllowPropertyChange(P_Created, this.created, newValue)) {
            setCreated(newValue);
        }
    }

    @OAProperty(maxLength = 35, displayLength = 20)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @XmlElement(name="name", nillable=true)
    public String getJaxbName() {
        if (!getJaxbShouldInclude(P_Name)) return null;
        return getName();
    }
    public void setJaxbName(String newValue) {
        if (getJaxbAllowPropertyChange(P_Name, this.name, newValue)) {
            setName(newValue);
        }
    }

    @OAProperty(displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getCore() {
        return core;
    }
    public boolean isCore() {
        return getCore();
    }
    public void setCore(boolean newValue) {
        boolean old = core;
        fireBeforePropertyChange(P_Core, old, newValue);
        this.core = newValue;
        firePropertyChange(P_Core, old, this.core);
    }
    @XmlElement(name="core")
    public Boolean getJaxbCore() {
        if (!getJaxbShouldInclude(P_Core)) return null;
        return getCore();
    }
    public void setJaxbCore(Boolean newValue) {
        if (getJaxbAllowPropertyChange(P_Core, this.core, newValue)) {
            setCore(newValue);
        }
    }

    @OAProperty(displayLength = 20, isHtml = true)
    @OAColumn(maxLength = 0)
    public String getDoc() {
        return doc;
    }
    public void setDoc(String newValue) {
        String old = doc;
        fireBeforePropertyChange(P_Doc, old, newValue);
        this.doc = newValue;
        firePropertyChange(P_Doc, old, this.doc);
    }
    @XmlElement(name="doc", nillable=true)
    public String getJaxbDoc() {
        if (!getJaxbShouldInclude(P_Doc)) return null;
        return getDoc();
    }
    public void setJaxbDoc(String newValue) {
        if (getJaxbAllowPropertyChange(P_Doc, this.doc, newValue)) {
            setDoc(newValue);
        }
    }

    @OAOne(
        displayName = "Package Info", 
        reverseName = PackageInfo.P_ClassInfos, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"PackageInfoId"})
    @XmlTransient
    public PackageInfo getPackageInfo() {
        if (packageInfo == null) {
            packageInfo = (PackageInfo) getObject(P_PackageInfo);
        }
        return packageInfo;
    }
    public void setPackageInfo(PackageInfo newValue) {
        PackageInfo old = this.packageInfo;
        fireBeforePropertyChange(P_PackageInfo, old, newValue);
        this.packageInfo = newValue;
        firePropertyChange(P_PackageInfo, old, this.packageInfo);
    }
    @XmlElement(name="packageInfo", required=true)
    public PackageInfo getJaxbPackageInfo() {
        Object obj = super.getJaxbObject(P_PackageInfo);
        return (PackageInfo) obj;
    }
    public void setJaxbPackageInfo(PackageInfo newValue) {
        if (getJaxbAllowPropertyChange(P_PackageInfo, this.packageInfo, newValue)) {
            setPackageInfo(newValue);
        }
    }
    @XmlElement(name="refPackageInfo")
    @XmlIDREF
    public PackageInfo getJaxbRefPackageInfo() {
        Object obj = super.getJaxbRefObject(P_PackageInfo);
        return (PackageInfo) obj;
    }
    public void setJaxbRefPackageInfo(PackageInfo newValue) {
        setJaxbPackageInfo(newValue);
    }
    @XmlElement(name="packageInfoId", required=true)
    public String getJaxbPackageInfoId() {
        String s = super.getJaxbId(P_PackageInfo);
        return s;
    }
    public void setJaxbPackageInfoId(String id) {
        setJaxbId(P_PackageInfo, id);
    }
     
    @OAOne(
        reverseName = Page.P_ClassInfo, 
        autoCreateNew = true, 
        allowAddExisting = false
    )
    @XmlTransient
    public Page getPage() {
        if (page == null) {
            page = (Page) getObject(P_Page);
        }
        return page;
    }
    public void setPage(Page newValue) {
        Page old = this.page;
        fireBeforePropertyChange(P_Page, old, newValue);
        this.page = newValue;
        firePropertyChange(P_Page, old, this.page);
    }
    @XmlElement(name="page")
    public Page getJaxbPage() {
        Object obj = super.getJaxbObject(P_Page);
        return (Page) obj;
    }
    public void setJaxbPage(Page newValue) {
        if (getJaxbAllowPropertyChange(P_Page, this.page, newValue)) {
            setPage(newValue);
        }
    }
    @XmlElement(name="refPage")
    @XmlIDREF
    public Page getJaxbRefPage() {
        Object obj = super.getJaxbRefObject(P_Page);
        return (Page) obj;
    }
    public void setJaxbRefPage(Page newValue) {
        setJaxbPage(newValue);
    }
    @XmlElement(name="pageId", nillable=true)
    public String getJaxbPageId() {
        String s = super.getJaxbId(P_Page);
        return s;
    }
    public void setJaxbPageId(String id) {
        setJaxbId(P_Page, id);
    }
     
    @OAMany(
        displayName = "Reference Pages", 
        toClass = Page.class, 
        reverseName = Page.P_ReferenceClassInfos
    )
    @OALinkTable(name = "PageClassInfo", indexName = "PageReferenceClassInfos", columns = {"ClassInfoId"})
    @XmlTransient
    public Hub<Page> getReferencePages() {
        if (hubReferencePages == null) {
            hubReferencePages = (Hub<Page>) getHub(P_ReferencePages);
        }
        return hubReferencePages;
    }
    @XmlElementWrapper(name="referencePages")
    @XmlElement(name="page", type=Page.class)
    protected List<Page> getJaxbReferencePages() {
        return getJaxbHub(P_ReferencePages);
    }
    @XmlElementWrapper(name="refReferencePages")
    @XmlElement(name="page", type=Page.class)
    @XmlIDREF
    protected List<Page> getJaxbRefReferencePages() {
        return getJaxbRefHub(P_ReferencePages); 
    }
    protected void setJaxbRefReferencePages(List<Page> lst) {
        // no-op, since jaxb sends lst=hubReferencePages 
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.core = rs.getBoolean(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ClassInfo.P_Core, true);
        }
        this.doc = rs.getString(5);
        int packageInfoFkey = rs.getInt(6);
        if (!rs.wasNull() && packageInfoFkey > 0) {
            setProperty(P_PackageInfo, new OAObjectKey(packageInfoFkey));
        }
        if (rs.getMetaData().getColumnCount() != 6) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
    public static ClassInfo jaxbCreate() {
        ClassInfo classInfo = (ClassInfo) OAObject.jaxbCreateInstance(ClassInfo.class);
        if (classInfo == null) classInfo = new ClassInfo();
        return classInfo;
    }
}
 
