// Generated by OABuilder
package com.viaoa.docbuilder.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import javax.xml.bind.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.viaoa.docbuilder.delegate.oa.*;
import com.viaoa.docbuilder.model.oa.filter.*;
import com.viaoa.docbuilder.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "projectInfo",
    pluralName = "ProjectInfos",
    shortName = "pri",
    displayName = "Project Info",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "ProjectInfoPage", fkey = true, columns = { @OAIndexColumn(name = "PageId") })
    }
)
@XmlRootElement(name = "projectInfo")
@XmlType(factoryMethod = "jaxbCreate")
@XmlAccessorType(XmlAccessType.NONE)
public class ProjectInfo extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ProjectInfo.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Directory = "Directory";
    public static final String P_Directory = "Directory";
    public static final String PROPERTY_Console = "Console";
    public static final String P_Console = "Console";
     
     
    public static final String PROPERTY_PackageInfos = "PackageInfos";
    public static final String P_PackageInfos = "PackageInfos";
    public static final String PROPERTY_Page = "Page";
    public static final String P_Page = "Page";
     
    public static final String METHOD_LoadClasses = "LoadClasses";
    public static final String M_LoadClasses = "LoadClasses";
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
    protected volatile String directory;
    protected volatile String console;
     
    // Links to other objects.
    protected transient Hub<PackageInfo> hubPackageInfos;
    protected volatile transient Page page;
     
    public ProjectInfo() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
        getPage(); // have it autoCreated
    }
     
    public ProjectInfo(int id) {
        this();
        setId(id);
    }
     

    @XmlAttribute(name="oaSingleId")
    public Integer getJaxbGuid() {
        return super.getJaxbGuid();
    }

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @XmlTransient
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @XmlID
    @XmlAttribute(name="id")
    public String getJaxbId() {
        // note: jaxb spec requires id to be a string
        if (!getJaxbShouldInclude(P_Id)) return null;
        return ""+id;
    }
    public void setJaxbId(String id) {
        if (getJaxbAllowPropertyChange(P_Id, this.id, id)) {
            setId((int) OAConv.convert(int.class, id));
        }
    }

    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @XmlElement(name="created", nillable=true)
    public OADateTime getJaxbCreated() {
        if (!getJaxbShouldInclude(P_Created)) return null;
        return getCreated();
    }
    public void setJaxbCreated(OADateTime newValue) {
        if (getJaxbAllowPropertyChange(P_Created, this.created, newValue)) {
            setCreated(newValue);
        }
    }

    @OAProperty(maxLength = 35, displayLength = 20)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @XmlElement(name="name", nillable=true)
    public String getJaxbName() {
        if (!getJaxbShouldInclude(P_Name)) return null;
        return getName();
    }
    public void setJaxbName(String newValue) {
        if (getJaxbAllowPropertyChange(P_Name, this.name, newValue)) {
            setName(newValue);
        }
    }

    @OAProperty(maxLength = 200, displayLength = 32, columnLength = 20)
    @OAColumn(maxLength = 200)
    public String getDirectory() {
        return directory;
    }
    public void setDirectory(String newValue) {
        String old = directory;
        fireBeforePropertyChange(P_Directory, old, newValue);
        this.directory = newValue;
        firePropertyChange(P_Directory, old, this.directory);
    }
    @XmlElement(name="directory", nillable=true)
    public String getJaxbDirectory() {
        if (!getJaxbShouldInclude(P_Directory)) return null;
        return getDirectory();
    }
    public void setJaxbDirectory(String newValue) {
        if (getJaxbAllowPropertyChange(P_Directory, this.directory, newValue)) {
            setDirectory(newValue);
        }
    }

    @OAProperty(maxLength = 250, displayLength = 20)
    public String getConsole() {
        return console;
    }
    public void setConsole(String newValue) {
        String old = console;
        fireBeforePropertyChange(P_Console, old, newValue);
        this.console = newValue;
        firePropertyChange(P_Console, old, this.console);
    }
    @XmlTransient
    public String getJaxbConsole() {
        if (!getJaxbShouldInclude(P_Console)) return null;
        return getConsole();
    }
    public void setJaxbConsole(String newValue) {
        if (getJaxbAllowPropertyChange(P_Console, this.console, newValue)) {
            setConsole(newValue);
        }
    }

    @OAMany(
        displayName = "Package Infos", 
        toClass = PackageInfo.class, 
        recursive = true, 
        owner = true, 
        reverseName = PackageInfo.P_ProjectInfo, 
        cascadeSave = true, 
        cascadeDelete = true, 
        seqProperty = PackageInfo.P_Seq, 
        sortProperty = PackageInfo.P_Seq
    )
    @XmlTransient
    public Hub<PackageInfo> getPackageInfos() {
        if (hubPackageInfos == null) {
            hubPackageInfos = (Hub<PackageInfo>) getHub(P_PackageInfos);
        }
        return hubPackageInfos;
    }
    @XmlElementWrapper(name="packageInfos")
    @XmlElement(name="packageInfo", type=PackageInfo.class)
    protected List<PackageInfo> getJaxbPackageInfos() {
        return getJaxbHub(P_PackageInfos);
    }
    @XmlElementWrapper(name="refPackageInfos")
    @XmlElement(name="packageInfo", type=PackageInfo.class)
    @XmlIDREF
    protected List<PackageInfo> getJaxbRefPackageInfos() {
        return getJaxbRefHub(P_PackageInfos); 
    }
    protected void setJaxbRefPackageInfos(List<PackageInfo> lst) {
        // no-op, since jaxb sends lst=hubPackageInfos 
    }
     
    @OAOne(
        reverseName = Page.P_ProjectInfo, 
        autoCreateNew = true, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"PageId"})
    @XmlTransient
    public Page getPage() {
        if (page == null) {
            page = (Page) getObject(P_Page);
        }
        return page;
    }
    public void setPage(Page newValue) {
        Page old = this.page;
        fireBeforePropertyChange(P_Page, old, newValue);
        this.page = newValue;
        firePropertyChange(P_Page, old, this.page);
    }
    @XmlElement(name="page")
    public Page getJaxbPage() {
        Object obj = super.getJaxbObject(P_Page);
        return (Page) obj;
    }
    public void setJaxbPage(Page newValue) {
        if (getJaxbAllowPropertyChange(P_Page, this.page, newValue)) {
            setPage(newValue);
        }
    }
    @XmlElement(name="refPage")
    @XmlIDREF
    public Page getJaxbRefPage() {
        Object obj = super.getJaxbRefObject(P_Page);
        return (Page) obj;
    }
    public void setJaxbRefPage(Page newValue) {
        setJaxbPage(newValue);
    }
    @XmlElement(name="pageId", nillable=true)
    public String getJaxbPageId() {
        String s = super.getJaxbId(P_Page);
        return s;
    }
    public void setJaxbPageId(String id) {
        setJaxbId(P_Page, id);
    }
     
    @OAMethod(displayName = "Load Classes")
    public void loadClasses() {
        // custom code here
        ProjectInfoDelegate.loadClasses(this);
    }
    @OAObjCallback(enabledProperty = ProjectInfo.P_Directory)
    public void loadClassesCallback(OAObjectCallback cb) {
    }

    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.directory = rs.getString(4);
        int pageFkey = rs.getInt(5);
        if (!rs.wasNull() && pageFkey > 0) {
            setProperty(P_Page, new OAObjectKey(pageFkey));
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
    public static ProjectInfo jaxbCreate() {
        ProjectInfo projectInfo = (ProjectInfo) OAObject.jaxbCreateInstance(ProjectInfo.class);
        if (projectInfo == null) projectInfo = new ProjectInfo();
        return projectInfo;
    }
}
 
