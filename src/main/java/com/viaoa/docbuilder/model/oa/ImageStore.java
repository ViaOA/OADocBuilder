// Generated by OABuilder
package com.viaoa.docbuilder.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.jaxb.adapter.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.viaoa.docbuilder.delegate.oa.*;
import com.viaoa.docbuilder.model.oa.filter.*;
import com.viaoa.docbuilder.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "imageStore",
    pluralName = "ImageStores",
    shortName = "ims",
    displayName = "Image Store",
    displayProperty = "id"
)
@OATable(
)
@XmlRootElement(name = "imageStore")
@XmlType(factoryMethod = "jaxbCreate")
@XmlAccessorType(XmlAccessType.NONE)
public class ImageStore extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ImageStore.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Bytes = "Bytes";
    public static final String P_Bytes = "Bytes";
    public static final String PROPERTY_OrigFileName = "OrigFileName";
    public static final String P_OrigFileName = "OrigFileName";
    public static final String PROPERTY_DrawioLink = "DrawioLink";
    public static final String P_DrawioLink = "DrawioLink";
     
     
    public static final String PROPERTY_Pages = "Pages";
    public static final String P_Pages = "Pages";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile transient byte[] bytes;
    protected volatile String origFileName;
    protected volatile String drawioLink;
     
     
    public ImageStore() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public ImageStore(int id) {
        this();
        setId(id);
    }
     

    @XmlAttribute(name="oaSingleId")
    public Integer getJaxbGuid() {
        return super.getJaxbGuid();
    }

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @XmlTransient
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @XmlID
    @XmlAttribute(name="id")
    public String getJaxbId() {
        // note: jaxb spec requires id to be a string
        if (!getJaxbShouldInclude(P_Id)) return null;
        return ""+id;
    }
    public void setJaxbId(String id) {
        if (getJaxbAllowPropertyChange(P_Id, this.id, id)) {
            setId((int) OAConv.convert(int.class, id));
        }
    }

    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @XmlElement(name="created", nillable=true)
    public OADateTime getJaxbCreated() {
        if (!getJaxbShouldInclude(P_Created)) return null;
        return getCreated();
    }
    public void setJaxbCreated(OADateTime newValue) {
        if (getJaxbAllowPropertyChange(P_Created, this.created, newValue)) {
            setCreated(newValue);
        }
    }

    @OAProperty(isBlob = true, columnLength = 5, isImageName = true)
    @OAColumn(sqlType = java.sql.Types.BLOB)
    public byte[] getBytes() {
        if (bytes == null) {
            bytes = getBlob(P_Bytes);
        }
        return bytes;
    }
    public void setBytes(byte[] newValue) {
        byte[] old = bytes;
        fireBeforePropertyChange(P_Bytes, old, newValue);
        this.bytes = newValue;
        firePropertyChange(P_Bytes, old, this.bytes);
    }
    @XmlElement(name="bytes", nillable=true)
    @XmlJavaTypeAdapter(OAByteArrayAdapter.class)
    public byte[] getJaxbBytes() {
        if (!getJaxbShouldInclude(P_Bytes)) return null;
        return getBytes();
    }
    public void setJaxbBytes(byte[] newValue) {
        if (getJaxbAllowPropertyChange(P_Bytes, this.bytes, newValue)) {
            setBytes(newValue);
        }
    }

    @OAProperty(displayName = "Orig File Name", maxLength = 250, displayLength = 30, columnLength = 20)
    @OAColumn(maxLength = 250)
    public String getOrigFileName() {
        return origFileName;
    }
    public void setOrigFileName(String newValue) {
        String old = origFileName;
        fireBeforePropertyChange(P_OrigFileName, old, newValue);
        this.origFileName = newValue;
        firePropertyChange(P_OrigFileName, old, this.origFileName);
    }
    @XmlElement(name="origFileName", nillable=true)
    public String getJaxbOrigFileName() {
        if (!getJaxbShouldInclude(P_OrigFileName)) return null;
        return getOrigFileName();
    }
    public void setJaxbOrigFileName(String newValue) {
        if (getJaxbAllowPropertyChange(P_OrigFileName, this.origFileName, newValue)) {
            setOrigFileName(newValue);
        }
    }

    @OAProperty(displayName = "Drawio Link", maxLength = 125, displayLength = 25, columnLength = 20)
    @OAColumn(maxLength = 125)
    public String getDrawioLink() {
        return drawioLink;
    }
    public void setDrawioLink(String newValue) {
        String old = drawioLink;
        fireBeforePropertyChange(P_DrawioLink, old, newValue);
        this.drawioLink = newValue;
        firePropertyChange(P_DrawioLink, old, this.drawioLink);
    }
    @XmlElement(name="drawioLink", nillable=true)
    public String getJaxbDrawioLink() {
        if (!getJaxbShouldInclude(P_DrawioLink)) return null;
        return getDrawioLink();
    }
    public void setJaxbDrawioLink(String newValue) {
        if (getJaxbAllowPropertyChange(P_DrawioLink, this.drawioLink, newValue)) {
            setDrawioLink(newValue);
        }
    }

    @OAMany(
        toClass = Page.class, 
        reverseName = Page.P_ImageStores, 
        createMethod = false
    )
    @OALinkTable(name = "PageImageStore", indexName = "PageImageStore", columns = {"ImageStoreId"})
    @XmlTransient
    private Hub<Page> getPages() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.origFileName = rs.getString(3);
        this.drawioLink = rs.getString(4);
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
    public static ImageStore jaxbCreate() {
        ImageStore imageStore = (ImageStore) OAObject.jaxbCreateInstance(ImageStore.class);
        if (imageStore == null) imageStore = new ImageStore();
        return imageStore;
    }
}
 
