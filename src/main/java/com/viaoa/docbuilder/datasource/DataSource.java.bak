// Generated by OABuilder

package com.viaoa.docbuilder.datasource;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.util.*;
import com.viaoa.object.OAAnnotationDelegate;
import com.viaoa.annotation.OATable;
import com.viaoa.datasource.jdbc.*;
import com.viaoa.datasource.jdbc.db.Database;
import com.viaoa.datasource.jdbc.db.Table;
import com.viaoa.datasource.jdbc.db.Column;
import com.viaoa.datasource.jdbc.db.Index;
import com.viaoa.datasource.jdbc.db.*;
import com.viaoa.docbuilder.resource.Resource;
import com.viaoa.docbuilder.model.oa.*;

public class DataSource {
    private static Logger LOG = Logger.getLogger(DataSource.class.getName());
    protected OADataSourceJDBC jdbcDataSource;
    protected Database database;
    protected DBMetaData dbmd;
    
    public DataSource() {
    }
    
    public void open() throws Exception {
        String driver = Resource.getValue(Resource.DB_JDBC_Driver);
        String jdbcUrl = Resource.getValue(Resource.DB_JDBC_URL);
        String user = Resource.getValue(Resource.DB_User);
        String pw = Resource.getValue(Resource.DB_Password);
        String pwBase64 = Resource.getValue(Resource.DB_Password_Base64);
        int dbmdType = Resource.getInt(Resource.DB_DBMD_Type);
        int minConnections = Resource.getInt(Resource.DB_MinConnections);
        int maxConnections = Resource.getInt(Resource.DB_MaxConnections);
    
        if (OAString.isEmpty(pw)) {
            String s = Base64.decode(pwBase64);
            if (!OAString.isEmpty(s)) pw = s;
        }
        open(driver, jdbcUrl, dbmdType, user, pw, minConnections, maxConnections);
    }
    
    protected void open(String driver, String jdbcUrl, int dbmdType, String user, String password, int min, int max) throws Exception {
        if (jdbcDataSource != null) return;
        String s = String.format("JDBC: driver=%s, url=%s, dbmdType=%d, user=%s", driver, jdbcUrl, dbmdType, user);
        LOG.fine(s);
        Database db = getDatabase();
    
        createDAO(db);
        dbmd = new DBMetaData(dbmdType, user, password, driver, jdbcUrl);
        dbmd.setMinConnections(min);
        dbmd.setMaxConnections(max);
        jdbcDataSource = new OADataSourceJDBC(db, dbmd);
    }
    
    public DBMetaData getDBMetaData() {
        return dbmd;
    }
    public void close() {
        getOADataSource().close();
    }
    
    
    public OADataSourceJDBC getOADataSource() {
        return jdbcDataSource;
    }

    public Database getDatabase() {
        if (database != null) return database;
        try {
            database = createDatabaseFromClasses();
        }
        catch (Exception e) {
            throw new RuntimeException("error creating database", e);
        }
        return database;
    }    
    
    private Database createDatabaseFromClasses() throws Exception {
        Database database = new Database();
    
        Table table = new Table("NextNumber",com.viaoa.datasource.autonumber.NextNumber.class); // ** Used by all OADataSource Database
        // NextNumber COLUMNS
        Column[] columns = new Column[2];
        columns[0] = new Column("nextNumberId","nextNumberId", Types.VARCHAR, 75);
        columns[0].primaryKey = true;
        columns[1] = new Column("nextNumber","nextNumber", Types.INTEGER);
        table.setColumns(columns);
        database.addTable(table);
        String packageName = AppServer.class.getPackage().getName();
        String[] fnames = OAReflect.getClasses(packageName);
    
        Class[] classes = null;
        for (String fn : fnames) {
            Class c = Class.forName(packageName + "." + fn);
            if (c.getAnnotation(OATable.class) == null) continue;
            classes = (Class[]) OAArray.add(Class.class, classes, c);
        }
        OAAnnotationDelegate.update(database, classes);
        return database;
    }
    private Database createDatabase() {
        int NextNumber = 0;
        // TABLES
        int APPSERVER = 1;
        int APPUSER = 2;
        int APPUSERERROR = 3;
        int APPUSERLOGIN = 4;
        int CLASSINFO = 5;
        int CODE = 6;
        int IMAGESTORE = 7;
        int LINKINFO = 8;
        int PACKAGEINFO = 9;
        int PAGE = 10;
        int PROJECTINFO = 11;
        int SECTION = 12;
        int TUTORIAL = 13;
        
        // LINK TABLES
        int PAGEIMAGESTORE = 14;
        int PAGECLASSINFO = 15;
        int MAX = 16;
        
        Database db = new Database();
        Table[] tables = new Table[MAX];
        Column[] columns;
        Link[] links;
        Column[] fkeys;
        
        // TABLES
        tables[NextNumber] = new Table("NextNumber",com.viaoa.datasource.autonumber.NextNumber.class); // ** Used by all OADataSource Database
        tables[APPSERVER] = new Table("AppServer", AppServer.class);
        tables[APPUSER] = new Table("AppUser", AppUser.class);
        tables[APPUSERERROR] = new Table("AppUserError", AppUserError.class);
        tables[APPUSERLOGIN] = new Table("AppUserLogin", AppUserLogin.class);
        tables[CLASSINFO] = new Table("ClassInfo", ClassInfo.class);
        tables[CODE] = new Table("Code", Code.class);
        tables[IMAGESTORE] = new Table("ImageStore", ImageStore.class);
        tables[LINKINFO] = new Table("LinkInfo", LinkInfo.class);
        tables[PACKAGEINFO] = new Table("PackageInfo", PackageInfo.class);
        tables[PAGE] = new Table("Page", Page.class);
        tables[PROJECTINFO] = new Table("ProjectInfo", ProjectInfo.class);
        tables[SECTION] = new Table("Section", Section.class);
        tables[TUTORIAL] = new Table("Tutorial", Tutorial.class);
        
        // LINK TABLES
        tables[PAGEIMAGESTORE] = new Table("PageImageStore",true);
        tables[PAGECLASSINFO] = new Table("PageClassInfo",true);
        
        // TABLE COLUMNS
        // NextNumber COLUMNS
        columns = new Column[2];
        columns[0] = new Column("nextNumberId","nextNumberId", Types.VARCHAR, 75);
        columns[0].primaryKey = true;
        columns[1] = new Column("nextNumber","nextNumber", Types.INTEGER);
        tables[NextNumber].setColumns(columns);
        
        // AppServer COLUMNS
        columns = new Column[6];
        columns[0] = new Column("Id", "id", Types.INTEGER, 5);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Started", "started", Types.TIMESTAMP);
        columns[3] = new Column("DemoMode", "demoMode", Types.BOOLEAN);
        columns[4] = new Column("Release", "release", Types.VARCHAR, 18);
        columns[5] = new Column("AppUserLoginId", true);
        tables[APPSERVER].setColumns(columns);
        tables[APPSERVER].addIndex(new Index("AppServerAppUserLogin", "AppUserLoginId", true));
        
        // AppUser COLUMNS
        columns = new Column[9];
        columns[0] = new Column("Id", "id", Types.INTEGER, 5);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("LoginId", "loginId", Types.VARCHAR, 24);
        columns[2] = new Column("Password", "password", Types.VARCHAR, 50);
        columns[3] = new Column("Admin", "admin", Types.BOOLEAN);
        columns[4] = new Column("EditProcessed", "editProcessed", Types.BOOLEAN);
        columns[5] = new Column("FirstName", "firstName", Types.VARCHAR, 30);
        columns[6] = new Column("LastName", "lastName", Types.VARCHAR, 55);
        columns[7] = new Column("InactiveDate", "inactiveDate", Types.DATE);
        columns[8] = new Column("Note", "note", Types.CLOB);
        tables[APPUSER].setColumns(columns);
        
        // AppUserError COLUMNS
        columns = new Column[7];
        columns[0] = new Column("Id", "id", Types.INTEGER, 5);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("DateTimeValue", "dateTime", Types.TIMESTAMP);
        columns[2] = new Column("Message", "message", Types.VARCHAR, 250);
        columns[3] = new Column("StackTrace", "stackTrace", Types.CLOB);
        columns[4] = new Column("Reviewed", "reviewed", Types.DATE);
        columns[5] = new Column("ReviewNote", "reviewNote", Types.VARCHAR, 254);
        columns[6] = new Column("AppUserLoginId", true);
        tables[APPUSERERROR].setColumns(columns);
        tables[APPUSERERROR].addIndex(new Index("AppUserErrorAppUserLogin", "AppUserLoginId", true));
        
        // AppUserLogin COLUMNS
        columns = new Column[11];
        columns[0] = new Column("Id", "id", Types.INTEGER, 5);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Location", "location", Types.VARCHAR, 50);
        columns[3] = new Column("ComputerName", "computerName", Types.VARCHAR, 32);
        columns[4] = new Column("Disconnected", "disconnected", Types.TIMESTAMP);
        columns[5] = new Column("ConnectionId", "connectionId", Types.INTEGER);
        columns[6] = new Column("HostName", "hostName", Types.VARCHAR, 35);
        columns[7] = new Column("IpAddress", "ipAddress", Types.VARCHAR, 20);
        columns[8] = new Column("TotalMemory", "totalMemory", Types.BIGINT);
        columns[9] = new Column("FreeMemory", "freeMemory", Types.BIGINT);
        columns[10] = new Column("AppUserId", true);
        tables[APPUSERLOGIN].setColumns(columns);
        tables[APPUSERLOGIN].addIndex(new Index("AppUserLoginAppUser", "AppUserId", true));
        
        // ClassInfo COLUMNS
        columns = new Column[6];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Name", "name", Types.VARCHAR, 35);
        columns[3] = new Column("Core", "core", Types.BOOLEAN);
        columns[4] = new Column("Doc", "doc", Types.VARCHAR, 0);
        columns[5] = new Column("PackageInfoId", true);
        tables[CLASSINFO].setColumns(columns);
        tables[CLASSINFO].addIndex(new Index("ClassInfoPackageInfo", "PackageInfoId", true));
        
        // Code COLUMNS
        columns = new Column[4];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Code", "code", Types.CLOB);
        columns[3] = new Column("PageId", true);
        tables[CODE].setColumns(columns);
        tables[CODE].addIndex(new Index("CodePage", "PageId", true));
        
        // ImageStore COLUMNS
        columns = new Column[5];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Bytes", "bytes", Types.BLOB);
        columns[3] = new Column("OrigFileName", "origFileName", Types.VARCHAR, 250);
        columns[4] = new Column("DrawioLink", "drawioLink", Types.VARCHAR, 125);
        tables[IMAGESTORE].setColumns(columns);
        
        // LinkInfo COLUMNS
        columns = new Column[6];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Name", "name", Types.VARCHAR, 35);
        columns[3] = new Column("Description", "description", Types.VARCHAR, 175);
        columns[4] = new Column("Link", "link", Types.VARCHAR, 125);
        columns[5] = new Column("PageId", true);
        tables[LINKINFO].setColumns(columns);
        tables[LINKINFO].addIndex(new Index("LinkInfoPage", "PageId", true));
        
        // PackageInfo COLUMNS
        columns = new Column[7];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("PackageName", "packageName", Types.VARCHAR, 75);
        columns[3] = new Column("Seq", "seq", Types.INTEGER);
        columns[4] = new Column("PageId", true);
        columns[5] = new Column("ParentPackageInfoId", true);
        columns[6] = new Column("ProjectInfoId", true);
        tables[PACKAGEINFO].setColumns(columns);
        tables[PACKAGEINFO].addIndex(new Index("PackageInfoPage", "PageId", true));
        tables[PACKAGEINFO].addIndex(new Index("PackageInfoParentPackageInfo", "ParentPackageInfoId", true));
        tables[PACKAGEINFO].addIndex(new Index("PackageInfoProjectInfo", "ProjectInfoId", true));
        
        // Page COLUMNS
        columns = new Column[7];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Seq", "seq", Types.INTEGER);
        columns[3] = new Column("Name", "name", Types.VARCHAR, 35);
        columns[4] = new Column("Doc", "doc", Types.CLOB);
        columns[5] = new Column("ClassInfoId", true);
        columns[6] = new Column("SectionId", true);
        tables[PAGE].setColumns(columns);
        tables[PAGE].addIndex(new Index("PageClassInfo", "ClassInfoId", true));
        tables[PAGE].addIndex(new Index("PageSection", "SectionId", true));
        
        // ProjectInfo COLUMNS
        columns = new Column[5];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Name", "name", Types.VARCHAR, 35);
        columns[3] = new Column("Directory", "directory", Types.VARCHAR, 200);
        columns[4] = new Column("PageId", true);
        tables[PROJECTINFO].setColumns(columns);
        tables[PROJECTINFO].addIndex(new Index("ProjectInfoPage", "PageId", true));
        
        // Section COLUMNS
        columns = new Column[6];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Seq", "seq", Types.INTEGER);
        columns[3] = new Column("Name", "name", Types.VARCHAR, 35);
        columns[4] = new Column("ParentSectionId", true);
        columns[5] = new Column("TutorialId", true);
        tables[SECTION].setColumns(columns);
        tables[SECTION].addIndex(new Index("SectionParentSection", "ParentSectionId", true));
        tables[SECTION].addIndex(new Index("SectionTutorial", "TutorialId", true));
        
        // Tutorial COLUMNS
        columns = new Column[3];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Name", "name", Types.VARCHAR, 35);
        tables[TUTORIAL].setColumns(columns);
        
        // Link Tables Columns
        
        // PageImageStore COLUMNS
        columns = new Column[2];
        columns[0] = new Column("PageId",null);
        columns[1] = new Column("ImageStoreId",null);
        tables[PAGEIMAGESTORE].setColumns(columns);
        tables[PAGEIMAGESTORE].addIndex(new Index("ImageInfoPage", new String[] {"PageId"}));
        tables[PAGEIMAGESTORE].addIndex(new Index("PageImageStore", new String[] {"ImageStoreId"}));
        
        // PageClassInfo COLUMNS
        columns = new Column[2];
        columns[0] = new Column("PageId",null);
        columns[1] = new Column("ClassInfoId",null);
        tables[PAGECLASSINFO].setColumns(columns);
        tables[PAGECLASSINFO].addIndex(new Index("ClassInfoReferencePage", new String[] {"PageId"}));
        tables[PAGECLASSINFO].addIndex(new Index("PageReferenceClassInfos", new String[] {"ClassInfoId"}));
        
        // LINKS
        // table.addLink( propertyName, toTableName, reversePropertyName, FKey ColumnNumber(s))
        tables[APPSERVER].addLink("appUserLogin", tables[APPUSERLOGIN], "appServers", new int[] {5});
        tables[APPUSER].addLink("appUserLogins", tables[APPUSERLOGIN], "appUser", new int[] {0});
        tables[APPUSERERROR].addLink("appUserLogin", tables[APPUSERLOGIN], "appUserErrors", new int[] {6});
        tables[APPUSERLOGIN].addLink("appServers", tables[APPSERVER], "appUserLogin", new int[] {0});
        tables[APPUSERLOGIN].addLink("appUser", tables[APPUSER], "appUserLogins", new int[] {10});
        tables[APPUSERLOGIN].addLink("appUserErrors", tables[APPUSERERROR], "appUserLogin", new int[] {0});
        tables[CLASSINFO].addLink("packageInfo", tables[PACKAGEINFO], "classInfos", new int[] {5});
        tables[CLASSINFO].addLink("page", tables[PAGE], "classInfo", new int[] {0});
        tables[CODE].addLink("page", tables[PAGE], "codes", new int[] {3});
        tables[LINKINFO].addLink("page", tables[PAGE], "linkInfos", new int[] {5});
        tables[PACKAGEINFO].addLink("classInfos", tables[CLASSINFO], "packageInfo", new int[] {0});
        tables[PACKAGEINFO].addLink("packageInfos", tables[PACKAGEINFO], "parentPackageInfo", new int[] {0});
        tables[PACKAGEINFO].addLink("page", tables[PAGE], "packageInfo", new int[] {4});
        tables[PACKAGEINFO].addLink("parentPackageInfo", tables[PACKAGEINFO], "packageInfos", new int[] {5});
        tables[PACKAGEINFO].addLink("projectInfo", tables[PROJECTINFO], "packageInfos", new int[] {6});
        tables[PAGE].addLink("classInfo", tables[CLASSINFO], "page", new int[] {5});
        tables[PAGE].addLink("codes", tables[CODE], "page", new int[] {0});
        tables[PAGE].addLink("linkInfos", tables[LINKINFO], "page", new int[] {0});
        tables[PAGE].addLink("packageInfo", tables[PACKAGEINFO], "page", new int[] {0});
        tables[PAGE].addLink("projectInfo", tables[PROJECTINFO], "page", new int[] {0});
        tables[PAGE].addLink("section", tables[SECTION], "page", new int[] {6});
        tables[PROJECTINFO].addLink("packageInfos", tables[PACKAGEINFO], "projectInfo", new int[] {0});
        tables[PROJECTINFO].addLink("page", tables[PAGE], "projectInfo", new int[] {4});
        tables[SECTION].addLink("page", tables[PAGE], "section", new int[] {0});
        tables[SECTION].addLink("parentSection", tables[SECTION], "sections", new int[] {4});
        tables[SECTION].addLink("sections", tables[SECTION], "parentSection", new int[] {0});
        tables[SECTION].addLink("tutorial", tables[TUTORIAL], "sections", new int[] {5});
        tables[TUTORIAL].addLink("sections", tables[SECTION], "tutorial", new int[] {0});
        
        // Links for Link Tables
        
        // PageImageStore LINKS
        tables[PAGEIMAGESTORE].addLink("pages", tables[PAGE], "imageStores", new int[] {0});
        tables[PAGE].addLink("imageStores", tables[PAGEIMAGESTORE], "pages", new int[] {0});
        tables[PAGEIMAGESTORE].addLink("imageStores", tables[IMAGESTORE], "pages", new int[] {1});
        tables[IMAGESTORE].addLink("pages", tables[PAGEIMAGESTORE], "imageStores", new int[] {0});
        
        // PageClassInfo LINKS
        tables[PAGECLASSINFO].addLink("referencePages", tables[PAGE], "referenceClassInfos", new int[] {0});
        tables[PAGE].addLink("referenceClassInfos", tables[PAGECLASSINFO], "referencePages", new int[] {0});
        tables[PAGECLASSINFO].addLink("referenceClassInfos", tables[CLASSINFO], "referencePages", new int[] {1});
        tables[CLASSINFO].addLink("referencePages", tables[PAGECLASSINFO], "referenceClassInfos", new int[] {0});
        db.setTables(tables);
        return db;
    }
    
    protected void createDAO(Database db) {
        DataAccessObject dao;
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "AppServer.Id";
            private static final String columns = "AppServer.Id, AppServer.Created, AppServer.Started, AppServer.DemoMode, AppServer.Release, AppServer.AppUserLoginId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getAppServer(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("AppServer").setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "AppUser.Id";
            private static final String columns = "AppUser.Id, AppUser.LoginId, AppUser.Password, AppUser.Admin, AppUser.EditProcessed, AppUser.FirstName, AppUser.LastName, AppUser.InactiveDate, AppUser.Note";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getAppUser(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("AppUser").setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "AppUserError.Id";
            private static final String columns = "AppUserError.Id, AppUserError.DateTimeValue, AppUserError.Message, AppUserError.StackTrace, AppUserError.Reviewed, AppUserError.ReviewNote, AppUserError.AppUserLoginId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getAppUserError(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("AppUserError").setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "AppUserLogin.Id";
            private static final String columns = "AppUserLogin.Id, AppUserLogin.Created, AppUserLogin.Location, AppUserLogin.ComputerName, AppUserLogin.Disconnected, AppUserLogin.ConnectionId, AppUserLogin.HostName, AppUserLogin.IpAddress, AppUserLogin.TotalMemory, AppUserLogin.FreeMemory, AppUserLogin.AppUserId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getAppUserLogin(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("AppUserLogin").setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "ClassInfo.Id";
            private static final String columns = "ClassInfo.Id, ClassInfo.Created, ClassInfo.Name, ClassInfo.Core, ClassInfo.Doc, ClassInfo.PackageInfoId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getClassInfo(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("ClassInfo").setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "Code.Id";
            private static final String columns = "Code.Id, Code.Created, Code.Code, Code.PageId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getCode(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("Code").setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "ImageStore.Id";
            private static final String columns = "ImageStore.Id, ImageStore.Created, ImageStore.OrigFileName, ImageStore.DrawioLink";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getImageStore(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("ImageStore").setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "LinkInfo.Id";
            private static final String columns = "LinkInfo.Id, LinkInfo.Created, LinkInfo.Name, LinkInfo.Description, LinkInfo.Link, LinkInfo.PageId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getLinkInfo(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("LinkInfo").setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "PackageInfo.Id";
            private static final String columns = "PackageInfo.Id, PackageInfo.Created, PackageInfo.PackageName, PackageInfo.Seq, PackageInfo.PageId, PackageInfo.ParentPackageInfoId, PackageInfo.ProjectInfoId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getPackageInfo(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("PackageInfo").setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "Page.Id";
            private static final String columns = "Page.Id, Page.Created, Page.Seq, Page.Name, Page.Doc, Page.ClassInfoId, Page.SectionId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getPage(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("Page").setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "ProjectInfo.Id";
            private static final String columns = "ProjectInfo.Id, ProjectInfo.Created, ProjectInfo.Name, ProjectInfo.Directory, ProjectInfo.PageId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getProjectInfo(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("ProjectInfo").setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "Section.Id";
            private static final String columns = "Section.Id, Section.Created, Section.Seq, Section.Name, Section.ParentSectionId, Section.TutorialId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getSection(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("Section").setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "Tutorial.Id";
            private static final String columns = "Tutorial.Id, Tutorial.Created, Tutorial.Name";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getTutorial(rsi.getResultSet(), rsi);
            }
        };
        db.getTable("Tutorial").setDataAccessObject(dao);
    }
    
    protected AppServer getAppServer(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        AppServer appServer = (AppServer) OAObjectCacheDelegate.getObject(AppServer.class, id);
        if (appServer == null) {
            appServer = new AppServer();
            appServer.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return appServer;
    }
    
    protected AppUser getAppUser(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        AppUser appUser = (AppUser) OAObjectCacheDelegate.getObject(AppUser.class, id);
        if (appUser == null) {
            appUser = new AppUser();
            appUser.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return appUser;
    }
    
    protected AppUserError getAppUserError(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        AppUserError appUserError = (AppUserError) OAObjectCacheDelegate.getObject(AppUserError.class, id);
        if (appUserError == null) {
            appUserError = new AppUserError();
            appUserError.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return appUserError;
    }
    
    protected AppUserLogin getAppUserLogin(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        AppUserLogin appUserLogin = (AppUserLogin) OAObjectCacheDelegate.getObject(AppUserLogin.class, id);
        if (appUserLogin == null) {
            appUserLogin = new AppUserLogin();
            appUserLogin.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return appUserLogin;
    }
    
    protected ClassInfo getClassInfo(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        ClassInfo classInfo = (ClassInfo) OAObjectCacheDelegate.getObject(ClassInfo.class, id);
        if (classInfo == null) {
            classInfo = new ClassInfo();
            classInfo.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return classInfo;
    }
    
    protected Code getCode(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        Code code = (Code) OAObjectCacheDelegate.getObject(Code.class, id);
        if (code == null) {
            code = new Code();
            code.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return code;
    }
    
    protected ImageStore getImageStore(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        ImageStore imageStore = (ImageStore) OAObjectCacheDelegate.getObject(ImageStore.class, id);
        if (imageStore == null) {
            imageStore = new ImageStore();
            imageStore.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return imageStore;
    }
    
    protected LinkInfo getLinkInfo(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        LinkInfo linkInfo = (LinkInfo) OAObjectCacheDelegate.getObject(LinkInfo.class, id);
        if (linkInfo == null) {
            linkInfo = new LinkInfo();
            linkInfo.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return linkInfo;
    }
    
    protected PackageInfo getPackageInfo(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        PackageInfo packageInfo = (PackageInfo) OAObjectCacheDelegate.getObject(PackageInfo.class, id);
        if (packageInfo == null) {
            packageInfo = new PackageInfo();
            packageInfo.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return packageInfo;
    }
    
    protected Page getPage(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        Page page = (Page) OAObjectCacheDelegate.getObject(Page.class, id);
        if (page == null) {
            page = new Page();
            page.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return page;
    }
    
    protected ProjectInfo getProjectInfo(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        ProjectInfo projectInfo = (ProjectInfo) OAObjectCacheDelegate.getObject(ProjectInfo.class, id);
        if (projectInfo == null) {
            projectInfo = new ProjectInfo();
            projectInfo.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return projectInfo;
    }
    
    protected Section getSection(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        Section section = (Section) OAObjectCacheDelegate.getObject(Section.class, id);
        if (section == null) {
            section = new Section();
            section.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return section;
    }
    
    protected Tutorial getTutorial(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        Tutorial tutorial = (Tutorial) OAObjectCacheDelegate.getObject(Tutorial.class, id);
        if (tutorial == null) {
            tutorial = new Tutorial();
            tutorial.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return tutorial;
    }
}
