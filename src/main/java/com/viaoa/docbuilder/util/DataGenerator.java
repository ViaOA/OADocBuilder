// Generated by OABuilder
package com.viaoa.docbuilder.util;
import java.util.Stack;
import java.math.*;
import java.awt.Color;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.datasource.*;
import com.viaoa.util.*;
import com.viaoa.docbuilder.model.oa.*;
import com.viaoa.docbuilder.model.oa.filter.*;
import com.viaoa.docbuilder.delegate.*;
 
public class DataGenerator {
    OASelect sel;
    Hub hub;
    final Stack<OALinkInfo> stack = new Stack<>();
    public boolean add(OAObject obj, String linkName) {
        if (stack.size() > 20) {
            return false;
        }
        OAObjectInfo oi = OAObjectInfoDelegate.getObjectInfo(obj);
        OALinkInfo li = oi.getLinkInfo(linkName); 
        if (li == null) throw new RuntimeException("link="+linkName+", does not exist for object="+obj);
        if (stack.contains(li)) return false;
        stack.push(li);
        return true;
    }
    public void done(OAObject obj, String linkName) {
        OAObjectInfo oi = OAObjectInfoDelegate.getObjectInfo(obj);
        OALinkInfo li = oi.getLinkInfo(linkName); 
        if (li == null) throw new RuntimeException("link="+linkName+", does not exist for object="+obj);
        if (stack.pop() != li) {
            throw new RuntimeException("link="+linkName+", for object="+obj+", is not on the top of the stack");
        }
    }
    
    public AppServer createAppServer() {
        AppServer appServer = new AppServer();
        return appServer;
    }
    
    public void prepopulate(AppServer obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(AppServer obj, int level) {
        int x;
        int tot;
        if (add(obj, AppServer.P_AppUserLogin)) {
            // appUserLogin
            AppUserLogin appUserLogin = null;
            if (Math.random() < .75) {
                appUserLogin = (AppUserLogin) OAObjectCacheDelegate.getRandom(AppUserLogin.class, 500);
                if (appUserLogin != null) obj.setAppUserLogin(appUserLogin);
            }
            if (appUserLogin == null) {
                appUserLogin = createAppUserLogin();
                prepopulate(appUserLogin);
                obj.setAppUserLogin(appUserLogin);
            }
            done(obj, AppServer.P_AppUserLogin);
        }
    }
    
    public AppUser createAppUser() {
        AppUser appUser = new AppUser();
        return appUser;
    }
    
    public void prepopulate(AppUser obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(AppUser obj, int level) {
        int x;
        int tot;
    }
    
    public AppUserError createAppUserError() {
        AppUserError appUserError = new AppUserError();
        return appUserError;
    }
    
    public void prepopulate(AppUserError obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(AppUserError obj, int level) {
        int x;
        int tot;
        if (add(obj, AppUserError.P_AppUserLogin)) {
            // appUserLogin
            //    owned
            done(obj, AppUserError.P_AppUserLogin);
        }
    }
    
    public AppUserLogin createAppUserLogin() {
        AppUserLogin appUserLogin = new AppUserLogin();
        return appUserLogin;
    }
    
    public void prepopulate(AppUserLogin obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(AppUserLogin obj, int level) {
        int x;
        int tot;
        if (add(obj, AppUserLogin.P_AppUser)) {
            // appUser
            //    owned
            done(obj, AppUserLogin.P_AppUser);
        }
    }
    
    public ClassInfo createClassInfo() {
        ClassInfo classInfo = new ClassInfo();
        return classInfo;
    }
    
    public void prepopulate(ClassInfo obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(ClassInfo obj, int level) {
        int x;
        int tot;
        if (add(obj, ClassInfo.P_PackageInfo)) {
            // packageInfo
            //    owned
            done(obj, ClassInfo.P_PackageInfo);
        }
    }
    
    public Code createCode() {
        Code code = new Code();
        return code;
    }
    
    public void prepopulate(Code obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(Code obj, int level) {
        int x;
        int tot;
        if (add(obj, Code.P_Page)) {
            // page
            Page page = null;
            if (Math.random() < .75) {
                page = (Page) OAObjectCacheDelegate.getRandom(Page.class, 500);
                if (page != null) obj.setPage(page);
            }
            if (page == null) {
                page = createPage();
                prepopulate(page);
                obj.setPage(page);
            }
            done(obj, Code.P_Page);
        }
    }
    
    public ImageStore createImageStore() {
        ImageStore imageStore = new ImageStore();
        return imageStore;
    }
    
    public void prepopulate(ImageStore obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(ImageStore obj, int level) {
        int x;
        int tot;
    }
    
    public LinkInfo createLinkInfo() {
        LinkInfo linkInfo = new LinkInfo();
        return linkInfo;
    }
    
    public void prepopulate(LinkInfo obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(LinkInfo obj, int level) {
        int x;
        int tot;
        if (add(obj, LinkInfo.P_Page)) {
            // page
            Page page = null;
            if (Math.random() < .75) {
                page = (Page) OAObjectCacheDelegate.getRandom(Page.class, 500);
                if (page != null) obj.setPage(page);
            }
            if (page == null) {
                page = createPage();
                prepopulate(page);
                obj.setPage(page);
            }
            done(obj, LinkInfo.P_Page);
        }
    }
    
    public PackageInfo createPackageInfo() {
        PackageInfo packageInfo = new PackageInfo();
        return packageInfo;
    }
    
    public void prepopulate(PackageInfo obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(PackageInfo obj, int level) {
        int x;
        int tot;
        if (add(obj, PackageInfo.P_ParentPackageInfo)) {
            // parentPackageInfo
            //    owned
            done(obj, PackageInfo.P_ParentPackageInfo);
        }
        if (add(obj, PackageInfo.P_ProjectInfo)) {
            // projectInfo
            //    owned
            done(obj, PackageInfo.P_ProjectInfo);
        }
    }
    
    public Page createPage() {
        Page page = new Page();
        return page;
    }
    
    public void prepopulate(Page obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(Page obj, int level) {
        int x;
        int tot;
        if (add(obj, Page.P_ClassInfo)) {
            // classInfo
            ClassInfo classInfo = null;
            done(obj, Page.P_ClassInfo);
        }
        if (add(obj, Page.P_Section)) {
            // section
            Section section = null;
            done(obj, Page.P_Section);
        }
    }
    
    public ProjectInfo createProjectInfo() {
        ProjectInfo projectInfo = new ProjectInfo();
        return projectInfo;
    }
    
    public void prepopulate(ProjectInfo obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(ProjectInfo obj, int level) {
        int x;
        int tot;
    }
    
    public Section createSection() {
        Section section = new Section();
        return section;
    }
    
    public void prepopulate(Section obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(Section obj, int level) {
        int x;
        int tot;
        if (add(obj, Section.P_ParentSection)) {
            // parentSection
            //    owned
            done(obj, Section.P_ParentSection);
        }
        if (add(obj, Section.P_Tutorial)) {
            // tutorial
            //    owned
            done(obj, Section.P_Tutorial);
        }
    }
    
    public Tutorial createTutorial() {
        Tutorial tutorial = new Tutorial();
        return tutorial;
    }
    
    public void prepopulate(Tutorial obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(Tutorial obj, int level) {
        int x;
        int tot;
    }
    
    public void populate(AppServer obj) {
        populate(obj, 0);
    }
    public void populate(AppServer obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setStarted((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setDemoMode(Math.random() < .5 ? true : false);
        obj.setRelease(OAString.getDummyText(18, 0, 18));
    }
    
    public void populate(AppUser obj) {
        populate(obj, 0);
    }
    public void populate(AppUser obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setLoginId(OAString.getDummyText(12, 0, 24));
        obj.setPassword(OAString.getDummyText(12, 0, 50));
        obj.setAdmin(Math.random() < .5 ? true : false);
        obj.setSuperAdmin(Math.random() < .5 ? true : false);
        obj.setEditProcessed(Math.random() < .5 ? true : false);
        obj.setFirstName(OAString.getDummyText(12, 0, 30));
        obj.setLastName(OAString.getDummyText(12, 0, 55));
        if (Math.random() < .8) obj.setInactiveDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setNote(OAString.getDummyText(20, 0, 500));
        if (add(obj, AppUser.P_AppUserLogins)) {
            // appUserLogins
            tot = ((int) (Math.random()*4));
            tot -= obj.getAppUserLogins().size();
            for (int cnt=0; cnt<tot; cnt++) {
                AppUserLogin appUserLogin = null;
                appUserLogin = createAppUserLogin();
                obj.getAppUserLogins().add(appUserLogin);
                populate(appUserLogin);
            }
            done(obj, AppUser.P_AppUserLogins);
        }
    }
    
    public void populate(AppUserError obj) {
        populate(obj, 0);
    }
    public void populate(AppUserError obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setDateTime((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setMessage(OAString.getDummyText(35, 0, 250));
        obj.setStackTrace(OAString.getDummyText(40, 0, 500));
        obj.setReviewed((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setReviewNote(OAString.getDummyText(40, 0, 254));
    }
    
    public void populate(AppUserLogin obj) {
        populate(obj, 0);
    }
    public void populate(AppUserLogin obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setLocation(OAString.getDummyText(18, 0, 50));
        obj.setComputerName(OAString.getDummyText(32, 0, 32));
        obj.setDisconnected((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setConnectionId((int) (Math.random() * 900));
        obj.setHostName(OAString.getDummyText(14, 0, 35));
        obj.setIpAddress(OAString.getDummyText(15, 0, 20));
        obj.setTotalMemory((long) (Math.random() * 900));
        obj.setFreeMemory((long) (Math.random() * 900));
        if (add(obj, AppUserLogin.P_AppUserErrors)) {
            // appUserErrors
            tot = ((int) (Math.random()*4));
            tot -= obj.getAppUserErrors().size();
            for (int cnt=0; cnt<tot; cnt++) {
                AppUserError appUserError = null;
                appUserError = createAppUserError();
                obj.getAppUserErrors().add(appUserError);
                populate(appUserError);
            }
            done(obj, AppUserLogin.P_AppUserErrors);
        }
    }
    
    public void populate(ClassInfo obj) {
        populate(obj, 0);
    }
    public void populate(ClassInfo obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getDummyText(20, 0, 35));
        obj.setCore(Math.random() < .5 ? true : false);
        obj.setDoc(OAString.getDummyText(20, 0, 0));
        if (add(obj, ClassInfo.P_ReferencePages)) {
            // referencePages
            tot = ((int) (Math.random()*4));
            tot -= obj.getReferencePages().size();
            for (int cnt=0; cnt<tot; cnt++) {
                Page page = null;
                page = (Page) OAObjectCacheDelegate.getRandom(Page.class, 500);
                if (page != null) obj.getReferencePages().add(page);
            }
            done(obj, ClassInfo.P_ReferencePages);
        }
    }
    
    public void populate(Code obj) {
        populate(obj, 0);
    }
    public void populate(Code obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setCode(OAString.getDummyText(30, 0, 500));
    }
    
    public void populate(ImageStore obj) {
        populate(obj, 0);
    }
    public void populate(ImageStore obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setBytes(new byte[0]);
        obj.setOrigFileName(OAString.getDummyText(30, 0, 250));
        obj.setDrawioLink(OAString.getDummyText(25, 0, 125));
    }
    
    public void populate(LinkInfo obj) {
        populate(obj, 0);
    }
    public void populate(LinkInfo obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getDummyText(20, 0, 35));
        obj.setDescription(OAString.getDummyText(30, 0, 175));
        obj.setLink(OAString.getDummyText(32, 0, 125));
    }
    
    public void populate(PackageInfo obj) {
        populate(obj, 0);
    }
    public void populate(PackageInfo obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setPackageName(OAString.getDummyText(20, 0, 75));
        // seq is auto sequence
        if (add(obj, PackageInfo.P_ClassInfos)) {
            // classInfos
            tot = ((int) (Math.random()*4));
            tot -= obj.getClassInfos().size();
            for (int cnt=0; cnt<tot; cnt++) {
                ClassInfo classInfo = null;
                classInfo = createClassInfo();
                obj.getClassInfos().add(classInfo);
                populate(classInfo);
            }
            done(obj, PackageInfo.P_ClassInfos);
        }
        if (add(obj, PackageInfo.P_PackageInfos)) {
            // packageInfos
            if (level < 3) {
                tot = ((int) (Math.random()*3));
                tot -= obj.getPackageInfos().size();
                for (int cnt=0; cnt<tot; cnt++) {
                    PackageInfo packageInfo = null;
                }
            }
            done(obj, PackageInfo.P_PackageInfos);
        }
    }
    
    public void populate(Page obj) {
        populate(obj, 0);
    }
    public void populate(Page obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // seq is auto sequence
        obj.setName(OAString.getDummyText(20, 0, 35));
        obj.setDoc(OAString.getDummyText(30, 0, 500));
        if (add(obj, Page.P_Codes)) {
            // codes
            tot = ((int) (Math.random()*4));
            tot -= obj.getCodes().size();
            for (int cnt=0; cnt<tot; cnt++) {
                Code code = null;
            }
            done(obj, Page.P_Codes);
        }
        if (add(obj, Page.P_ImageStores)) {
            // imageStores
            tot = ((int) (Math.random()*4));
            tot -= obj.getImageStores().size();
            for (int cnt=0; cnt<tot; cnt++) {
                ImageStore imageStore = null;
                if (Math.random() < .75) {
                    imageStore = (ImageStore) OAObjectCacheDelegate.getRandom(ImageStore.class, 500);
                    if (imageStore != null) obj.getImageStores().add(imageStore);
                }
                if (imageStore == null) {
                    imageStore = createImageStore();
                    obj.getImageStores().add(imageStore);
                    populate(imageStore);
                }
            }
            done(obj, Page.P_ImageStores);
        }
        if (add(obj, Page.P_ReferenceClassInfos)) {
            // referenceClassInfos
            tot = ((int) (Math.random()*4));
            tot -= obj.getReferenceClassInfos().size();
            for (int cnt=0; cnt<tot; cnt++) {
                ClassInfo classInfo = null;
                classInfo = (ClassInfo) OAObjectCacheDelegate.getRandom(ClassInfo.class, 500);
                if (classInfo != null) obj.getReferenceClassInfos().add(classInfo);
            }
            done(obj, Page.P_ReferenceClassInfos);
        }
    }
    
    public void populate(ProjectInfo obj) {
        populate(obj, 0);
    }
    public void populate(ProjectInfo obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getDummyText(20, 0, 35));
        obj.setDirectory(OAString.getDummyText(32, 0, 200));
        obj.setConsole(OAString.getDummyText(20, 0, 250));
        if (add(obj, ProjectInfo.P_PackageInfos)) {
            // packageInfos
            tot = ((int) (Math.random()*4));
            tot -= obj.getPackageInfos().size();
            for (int cnt=0; cnt<tot; cnt++) {
                PackageInfo packageInfo = null;
                packageInfo = createPackageInfo();
                obj.getPackageInfos().add(packageInfo);
                populate(packageInfo);
            }
            done(obj, ProjectInfo.P_PackageInfos);
        }
    }
    
    public void populate(Section obj) {
        populate(obj, 0);
    }
    public void populate(Section obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // seq is auto sequence
        obj.setName(OAString.getDummyText(20, 0, 35));
        if (add(obj, Section.P_Sections)) {
            // sections
            if (level < 3) {
                tot = ((int) (Math.random()*3));
                tot -= obj.getSections().size();
                for (int cnt=0; cnt<tot; cnt++) {
                    Section section = null;
                    section = createSection();
                    obj.getSections().add(section);
                    populate(section, level+1);
                }
            }
            done(obj, Section.P_Sections);
        }
    }
    
    public void populate(Tutorial obj) {
        populate(obj, 0);
    }
    public void populate(Tutorial obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getDummyText(20, 0, 35));
        if (add(obj, Tutorial.P_Sections)) {
            // sections
            tot = ((int) (Math.random()*4));
            tot -= obj.getSections().size();
            for (int cnt=0; cnt<tot; cnt++) {
                Section section = null;
                section = createSection();
                obj.getSections().add(section);
                populate(section);
            }
            done(obj, Tutorial.P_Sections);
        }
    }
    public void createSamples() {
        int x;
        // lookups
        x = 1;
        for (int i=0; i<x; i++) {
            AppServer appServer = createAppServer();
            ModelDelegate.getCreateOneAppServerHub().add(appServer);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            AppUser appUser = createAppUser();
            ModelDelegate.getAppUsers().add(appUser);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            ProjectInfo projectInfo = createProjectInfo();
            ModelDelegate.getProjectInfos().add(projectInfo);
            hubPage.add(projectInfo.getPage());
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Tutorial tutorial = createTutorial();
            ModelDelegate.getTutorials().add(tutorial);
        }
        
        // others
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Code code = createCode();
            hubCode.add(code);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            ImageStore imageStore = createImageStore();
            hubImageStore.add(imageStore);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            LinkInfo linkInfo = createLinkInfo();
            hubLinkInfo.add(linkInfo);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Page page = createPage();
            hubPage.add(page);
        }
         
        // Now prepopulate new objects
        // lookups
        for (AppServer appServer : ModelDelegate.getCreateOneAppServerHub()) {
            prepopulate(appServer);
        }
        for (AppUser appUser : ModelDelegate.getAppUsers()) {
            prepopulate(appUser);
        }
        for (ProjectInfo projectInfo : ModelDelegate.getProjectInfos()) {
            prepopulate(projectInfo);
            hubPage.add(projectInfo.getPage());
        }
        for (Tutorial tutorial : ModelDelegate.getTutorials()) {
            prepopulate(tutorial);
        }
        
        // others
        for (Code code : hubCode) {
            prepopulate(code);
        }
        for (ImageStore imageStore : hubImageStore) {
            prepopulate(imageStore);
        }
        for (LinkInfo linkInfo : hubLinkInfo) {
            prepopulate(linkInfo);
        }
        for (Page page : hubPage) {
            prepopulate(page);
        }
        
        // Now populate new objects
        // lookups
        for (AppServer appServer : ModelDelegate.getCreateOneAppServerHub()) {
            populate(appServer);
        }
        for (AppUser appUser : ModelDelegate.getAppUsers()) {
            populate(appUser);
        }
        for (ProjectInfo projectInfo : ModelDelegate.getProjectInfos()) {
            populate(projectInfo);
        }
        for (Tutorial tutorial : ModelDelegate.getTutorials()) {
            populate(tutorial);
        }
        
        // others
        for (Code code : hubCode) {
            populate(code);
        }
        for (ImageStore imageStore : hubImageStore) {
            populate(imageStore);
        }
        for (LinkInfo linkInfo : hubLinkInfo) {
            populate(linkInfo);
        }
        for (Page page : hubPage) {
            populate(page);
        }
    }
    
    // Hubs to hold sample data that is not in ModelDelegate
    private Hub<Code> hubCode = new Hub<Code>(Code.class);
    private Hub<ImageStore> hubImageStore = new Hub<ImageStore>(ImageStore.class);
    private Hub<LinkInfo> hubLinkInfo = new Hub<LinkInfo>(LinkInfo.class);
    private Hub<Page> hubPage = new Hub<Page>(Page.class);
    
    public static void main(String[] args) {
        OAObjectCallbackDelegate.demoAllowAllToPass(true);
        DataGenerator dg = new DataGenerator();
        dg.createSamples();
        System.out.println("createSamples is done");
    }
}
 
